// Copyright 2021 Vodafone Group
//
// This file is part of UPSFdemo.
//
// UPSFdemo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// UPSFdemo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with UPSFdemo.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";
package bbf.sss;

import "google/protobuf/timestamp.proto";
option go_package = "sssproto/sss";


/* sssUpsf provides a set of services that will be exposed by the UPSF.
 * SubscribeSessionContextUpdates
 * SubscribeShardUpdates
 * UpdateShard
 * DeleteShard
 */
service sssUpsf {

    rpc Subscribe (SubscribeReq) returns (stream Update) {}

    rpc UpdateShard (UpdateShardReq) returns (ShardResp) {}
    rpc DeleteShard (DeleteShardReq) returns (ShardResp) {}
    rpc GetShard (GetShardReq) returns (ShardResp) {}
    rpc ListShards (ListShardReq) returns (ListShardResp) {}

    rpc UpdateTrafficSteeringFunction (UpdateTrafficSteeringFunctionReq) returns (TrafficSteeringFunctionResp) {}
    rpc DeleteTrafficSteeringFunction (DeleteTrafficSteeringFunctionReq) returns (TrafficSteeringFunctionResp) {}
    rpc GetTrafficSteeringFunction (GetTrafficSteeringFunctionReq) returns (TrafficSteeringFunctionResp) {}
    rpc ListTrafficSteeringFunctions (ListTrafficSteeringFunctionReq) returns (ListTrafficSteeringFunctionResp) {}

    rpc UpdateServiceGatewayUserPlane (UpdateServiceGatewayUserPlaneReq) returns (ServiceGatewayUserPlaneResp) {}
    rpc DeleteServiceGatewayUserPlane (DeleteServiceGatewayUserPlaneReq) returns (ServiceGatewayUserPlaneResp) {}
    rpc GetServiceGatewayUserPlane (GetServiceGatewayUserPlaneReq) returns (ServiceGatewayUserPlaneResp) {}
    rpc ListServiceGatewayUserPlanes (ListServiceGatewayUserPlaneReq) returns (ListServiceGatewayUserPlaneResp) {}

    rpc UpdateNetworkConnection (UpdateNetworkConnectionReq) returns (NetworkConnectionResp) {}
    rpc DeleteNetworkConnection (DeleteNetworkConnectionReq) returns (NetworkConnectionResp) {}
    rpc GetNetworkConnection (GetNetworkConnectionReq) returns (NetworkConnectionResp) {}
    rpc ListNetworkConnections (ListNetworkConnectionReq) returns (ListNetworkConnectionResp) {}

    rpc UpdateServiceGateway (UpdateServiceGatewayReq) returns (ServiceGatewayResp) {}
    rpc DeleteServiceGateway (DeleteServiceGatewayReq) returns (ServiceGatewayResp) {}
    rpc GetServiceGateway (GetServiceGatewayReq) returns (ServiceGatewayResp) {}
    rpc ListServiceGateways (ListServiceGatewayReq) returns (ListServiceGatewayResp) {}

    rpc UpdateSessionContext (UpdateSessionContextReq) returns (SessionContextResp) {}
    rpc DeleteSessionContext (DeleteSessionContextReq) returns (SessionContextResp) {}
    rpc GetSessionContext (GetSessionContextReq) returns (SessionContextResp) {}
    rpc ListSessionContexts (ListSessionContextReq) returns (ListSessionContextResp) {}

    rpc Lookup (LookupReq) returns (LookupResp) {}
}

/////////////////////////////////////////////////////////////////

/* Result is provides a simple success/failure to a response
 */
 enum Result {
    success = 0;
    fail = 1;
}

/* ItemStatus provides the status of an individual item
 */
enum ItemStatus {
    unknown  = 0; //item state is unknown
    active   = 1; //item is active and is correctly deployed in the network (eg desired=current)
    updating = 2; //item exists and is active, but is not correctly deployed in the network (eg desired!=current or removing shards for maintenance)
    deleting = 3; //item has been requested to be deleted, but deletion is not complete
    deleted  = 4; //item has been deleted
    inactive = 5; //item exists but cannot currently be used (eg under maintenance)
}

/* MetaData is a general message that can optionally be added to proved data about an item
 * It provides additional general info about the item itself
 */
 message MetaData {
    google.protobuf.Timestamp last_updated = 1;
    google.protobuf.Timestamp created = 2;
    google.protobuf.Timestamp delete_requested = 3;
    google.protobuf.Timestamp deleted = 4;
    ItemStatus item_status = 5;
    string name = 6;
}

/* ListFilter allows lists to be filtered based upon criteria
 */
message ListFilter {
    repeated string id_list = 2;
}

/* SubscribeReq is a general request for a subscription that allows a filter for
 * IDs to be specified.  Events will only be generated for TSF and SG identifiers
 * This is a 'work queue' style subscription where only one subscriber will receive any one event.
 */
message SubscribeReq {
    enum SubscriptionType {
        shards = 0;
        session_contexts = 1;
        network_connections = 2;
        service_gateway_user_planes = 3;
        traffic_steering_functions = 4;
        service_gateways = 5;
    }
    repeated SubscriptionType subscription = 1;
    repeated string id_list = 2;
}

/* Update provides one of multiple different update types
 */
message Update {
    oneof item {
        Shard shard = 1;
        SessionContext session_context = 2 ;
        NetworkConnection network_connection = 3 ;
        ServiceGatewayUserPlane service_gateway_user_plane = 4;
        TrafficSteeringFunction traffic_steering_function = 5;
        ServiceGateway service_gateway = 6;
    }
}

/* LookupReq requests the upsf to lookup the session context and identify the UP that it should be connected to.
   This assumes that the requestee knows the traffic steering function ID that originated the packet.
 */
 message LookupReq {
    SessionContext.Spec spec = 2;
}


/* LookupResp provides a response to a requested SessionContext Lookup
*/
message LookupResp {
    Result result = 1;
    SessionContext session_context = 2;
 }

/////////////////////////////////////////////////////////////////

/* UpdateServiceGatewayReq allows the creation or update of a ServiceGateway.
 * if the ID is set to 0 then this is considered a create request
 */
 message UpdateServiceGatewayReq {
    ServiceGateway service_gateway = 1;
}

/* DeleteServiceGatewayReq allows the deletion of a ServiceGateway.
*/
message DeleteServiceGatewayReq {
   string id = 1;
}

/* GetServiceGatewayReq gets a ServiceGateway
*/
message GetServiceGatewayReq {
   string id = 1;
}

/* ServiceGatewayResp provides a response to a requested change to a ServiceGateway.
*/
message ServiceGatewayResp {
   Result result = 1;
   ServiceGateway service_gateway = 2;
}

/* ServiceGatewayList contains a list of ServiceGateways.
*/
message ListServiceGatewayReq {
   ListFilter filter = 1;
}

/* ListServiceGatewayResp contains a list of ServiceGateways.
*/
message ListServiceGatewayResp {
   Result result = 1;
   repeated ServiceGateway service_gateway = 2;
}

/////////////////////////////////////////////////////////////////

/* UpdateShardReq allows the creation or update of a shard.
 * if the ID is set to 0 then this is considered a create request
 */
message UpdateShardReq {
     Shard shard = 1;
}

/* DeleteShardReq allows the deletion of a shard.
 */
 message DeleteShardReq {
    string id = 1;
}

/* GetShardReq gets a shard
 */
 message GetShardReq {
    string id = 1;
}

/* ShardResp provides a response to a requested change to a shard.
 */
message ShardResp {
	Result result = 1;
    Shard shard = 2;
}

/* ShardList contains a list of shards.
 */
message ListShardReq {
    ListFilter filter = 1;
}

/* ListShardResp contains a list of shards.
 */
 message ListShardResp {
   Result result = 1;
    repeated Shard shard = 2;
}

/////////////////////////////////////////////////////////////////

/* UpdateTrafficSteeringFunctionReq allows the creation or update of a trafficsteeringfunction.
 * if the ID is set to 0 then this is considered a create request
 */
 message UpdateTrafficSteeringFunctionReq {
    TrafficSteeringFunction traffic_steering_function = 1;
}

/* DeleteTrafficSteeringFunctionReq allows the deletion of a trafficsteeringfunction.
*/
message DeleteTrafficSteeringFunctionReq {
   string id = 1;
}

/* GetTrafficSteeringFunctionReq gets a trafficsteeringfunction
*/
message GetTrafficSteeringFunctionReq {
   string id = 1;
}

/* TrafficSteeringFunctionResp provides a response to a requested change to a trafficsteeringfunction.
*/
message TrafficSteeringFunctionResp {
   Result result = 1;
   TrafficSteeringFunction traffic_steering_function = 2;
}

/* TrafficSteeringFunctionList contains a list of trafficsteeringfunctions.
*/
message ListTrafficSteeringFunctionReq {
   ListFilter filter = 1;
}

/* ListTrafficSteeringFunctionResp contains a list of trafficsteeringfunctions.
*/
message ListTrafficSteeringFunctionResp {
   Result result = 1;
   repeated TrafficSteeringFunction traffic_steering_function = 2;
}

/////////////////////////////////////////////////////////////////

/* UpdateServiceGatewayUserPlaneReq allows the creation or update of a ServiceGatewayUserPlane.
 * if the ID is set to 0 then this is considered a create request
 */
 message UpdateServiceGatewayUserPlaneReq {
    ServiceGatewayUserPlane service_gateway_user_plane = 1;
}

/* DeleteServiceGatewayUserPlaneReq allows the deletion of a ServiceGatewayUserPlane.
*/
message DeleteServiceGatewayUserPlaneReq {
   string id = 1;
}

/* GetServiceGatewayUserPlaneReq gets a ServiceGatewayUserPlane
*/
message GetServiceGatewayUserPlaneReq {
   string id = 1;
}

/* ServiceGatewayUserPlaneResp provides a response to a requested change to a ServiceGatewayUserPlane.
*/
message ServiceGatewayUserPlaneResp {
   Result result = 1;
   ServiceGatewayUserPlane service_gateway_user_plane = 2;
}

/* ServiceGatewayUserPlaneList contains a list of ServiceGatewayUserPlanes.
*/
message ListServiceGatewayUserPlaneReq {
   ListFilter filter = 2;
}

/* ListServiceGatewayUserPlaneResp contains a list of ServiceGatewayUserPlanes.
*/
message ListServiceGatewayUserPlaneResp {
   Result result = 1;
   repeated ServiceGatewayUserPlane service_gateway_user_plane = 2;
}

/////////////////////////////////////////////////////////////////

/* UpdateNetworkConnectionReq allows the creation or update of a NetworkConnection.
 * if the ID is set to 0 then this is considered a create request
 */
 message UpdateNetworkConnectionReq {
    NetworkConnection network_connection = 1;
}

/* DeleteNetworkConnectionReq allows the deletion of a NetworkConnection.
*/
message DeleteNetworkConnectionReq {
   string id = 1;
}

/* GetNetworkConnectionReq gets a NetworkConnection
*/
message GetNetworkConnectionReq {
   string id = 1;
}

/* NetworkConnectionResp provides a response to a requested change to a NetworkConnection.
*/
message NetworkConnectionResp {
   Result result = 1;
   NetworkConnection network_connection = 2;
}

/* NetworkConnectionList contains a list of NetworkConnections.
*/
message ListNetworkConnectionReq {
   ListFilter filter = 1;
}

/* ListNetworkConnectionResp contains a list of NetworkConnections.
*/
message ListNetworkConnectionResp {
   Result result = 1;
   repeated NetworkConnection network_connection = 2;
}


/////////////////////////////////////////////////////////////////

/* UpdateSessionContextReq allows the creation or update of a SessionContext.
 * if the ID is set to 0 then this is considered a create request
 */
 message UpdateSessionContextReq {
    SessionContext session_context = 1;
}

/* DeleteSessionContextReq allows the deletion of a SessionContext.
*/
message DeleteSessionContextReq {
   string id = 1;
}

/* GetSessionContextReq gets a SessionContext
*/
message GetSessionContextReq {
   string id = 1;
}

/* SessionContextResp provides a response to a requested change to a SessionContext.
*/
message SessionContextResp {
   Result result = 1;
   SessionContext session_context = 2;
}

/* SessionContextList contains a list of SessionContexts.
*/
message ListSessionContextReq {
   ListFilter filter = 1;
}

/* ListSessionContextResp contains a list of SessionContexts.
*/
message ListSessionContextResp {
   repeated SessionContext session_context = 1;
}



/////////////////////////////////////////////////////////////////

/* ServiceGatewayUserPlane provides the data associated with a SGUP.
 */
message ServiceGatewayUserPlane{
    string id = 1;
    string service_gateway_id = 2;
    MetaData metadata = 3;
    message Spec {
        int32 max_session_count = 1;
        repeated string supported_service_group = 2;
        bool maintenence = 3;
        string access_ip_address = 9901;  //tbc - this may not be required for a real solution
        string core_ip_address = 9902;  //tbc - this may not be required for a real solution
        string access_mac = 9903;  //required for demo only.
        string core_mac = 9904;  //required for demo only.
    }
    Spec spec = 4;
    message Status {
        int32 allocated_session_count = 1;
        repeated int32 network_connection = 2;
    }
    Status status = 5;
}

/* Shard provides the data associated with a shard.
 */
message Shard{
    string id = 1;
    MetaData metadata = 2;
    message Spec {
        int32 max_session_count = 1;
        string desired_service_gateway_user_plane =2;
        repeated string desired_network_connection = 3;
        string required_qos = 4;
    }
    Spec spec = 3;
    message Status {
        string current_service_gateway_user_plane =1;
        map<string, string> tsf_network_connection = 2;
        repeated string ip_prefixes = 3;
    }
    Status status = 4;
}

/* TrafficSteeringFunction provides the data associated with a tsf.
 */
message TrafficSteeringFunction{
    string id = 1;
    MetaData metadata = 2;
    message Spec {
      string ip_address = 9901; //tbc - this may not be required for a real solution
      string mac = 9903;  //required for demo only.
   }
   Spec spec = 3;
}

/* ServiceGateway provides the data associated with a Service Gateway.
 */
 message ServiceGateway{
    string id = 1;
    MetaData metadata = 2;
}

/* NetworkConnection provides the data associated with a nc.
 */
message NetworkConnection{
    string id = 1;
    MetaData metadata = 2;
    message Spec {
        string traffic_steering_function = 1;
        string service_gateway_user_plane = 2;
        oneof transport {
            VxlanConnection vxlan = 3;
        }
    }
    Spec spec = 3;
    message Status {
      enum NcEndpointStatus {
         UNKNOWN = 0;
         UP = 1;
         DOWN = 2;
     }
     NcEndpointStatus nc_traffic_steering_function_status = 1;
     NcEndpointStatus nc_service_gateway_user_plane_status = 2;
    }
    Status status = 4;
}

/* VxlanConnection provides the data associated with a VxlanConnection.
 */
message VxlanConnection
{
    message Vtep {
       string ip_address = 1;
       int32 udp_port = 2;
       string mac_address = 9903; //required for demo only.
    }
    Vtep traffic_steering_function_vni = 1;
    Vtep service_gateway_user_plane_vni = 2;
    int32 vni = 3;
}

/* SessionContext provides the data associated with a sessioncontext.
 */
message SessionContext{
    string id = 1;
    MetaData metadata = 2;
    message Spec {
        string traffic_steering_function = 1;
        string desired_shard = 2;
        repeated string required_service_group = 3;
        string required_qos = 4;
        enum ContextType {
            DEFAULT = 0;
            PPPOE = 1;
            IPOE = 2;
        }
        ContextType context_type = 5;
        SessionFilter session_filter = 6;
    }
    Spec spec = 3;
    message Status {
        string current_shard = 2;
    }
    Status status = 4;
}

/* SessionFilter is a a filter that can be used to identify a subscriber.
 */
message SessionFilter{
    string mac_address = 1;
    int32 svlan = 2;
    int32 cvlan = 3;
    string circuit_id = 4;
    string remote_id = 5;
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sssupsf.proto

#include "sssupsf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bbf {
namespace sss {
constexpr MetaData::MetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_updated_(nullptr)
  , created_(nullptr)
  , delete_requested_(nullptr)
  , deleted_(nullptr)
  , item_status_(0)
{}
struct MetaDataDefaultTypeInternal {
  constexpr MetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataDefaultTypeInternal() {}
  union {
    MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataDefaultTypeInternal _MetaData_default_instance_;
constexpr ListFilter::ListFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_list_(){}
struct ListFilterDefaultTypeInternal {
  constexpr ListFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListFilterDefaultTypeInternal() {}
  union {
    ListFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListFilterDefaultTypeInternal _ListFilter_default_instance_;
constexpr SubscribeReq::SubscribeReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_()
  , _subscription_cached_byte_size_(0)
  , id_list_(){}
struct SubscribeReqDefaultTypeInternal {
  constexpr SubscribeReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeReqDefaultTypeInternal() {}
  union {
    SubscribeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
constexpr Update::Update(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct UpdateDefaultTypeInternal {
  constexpr UpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDefaultTypeInternal() {}
  union {
    Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDefaultTypeInternal _Update_default_instance_;
constexpr LookupReq::LookupReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr){}
struct LookupReqDefaultTypeInternal {
  constexpr LookupReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupReqDefaultTypeInternal() {}
  union {
    LookupReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupReqDefaultTypeInternal _LookupReq_default_instance_;
constexpr LookupResp::LookupResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_context_(nullptr)
  , result_(0)
{}
struct LookupRespDefaultTypeInternal {
  constexpr LookupRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupRespDefaultTypeInternal() {}
  union {
    LookupResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupRespDefaultTypeInternal _LookupResp_default_instance_;
constexpr UpdateServiceGatewayReq::UpdateServiceGatewayReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_(nullptr){}
struct UpdateServiceGatewayReqDefaultTypeInternal {
  constexpr UpdateServiceGatewayReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateServiceGatewayReqDefaultTypeInternal() {}
  union {
    UpdateServiceGatewayReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateServiceGatewayReqDefaultTypeInternal _UpdateServiceGatewayReq_default_instance_;
constexpr DeleteServiceGatewayReq::DeleteServiceGatewayReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteServiceGatewayReqDefaultTypeInternal {
  constexpr DeleteServiceGatewayReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteServiceGatewayReqDefaultTypeInternal() {}
  union {
    DeleteServiceGatewayReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteServiceGatewayReqDefaultTypeInternal _DeleteServiceGatewayReq_default_instance_;
constexpr GetServiceGatewayReq::GetServiceGatewayReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetServiceGatewayReqDefaultTypeInternal {
  constexpr GetServiceGatewayReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceGatewayReqDefaultTypeInternal() {}
  union {
    GetServiceGatewayReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceGatewayReqDefaultTypeInternal _GetServiceGatewayReq_default_instance_;
constexpr ServiceGatewayResp::ServiceGatewayResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_(nullptr)
  , result_(0)
{}
struct ServiceGatewayRespDefaultTypeInternal {
  constexpr ServiceGatewayRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayRespDefaultTypeInternal() {}
  union {
    ServiceGatewayResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayRespDefaultTypeInternal _ServiceGatewayResp_default_instance_;
constexpr ListServiceGatewayReq::ListServiceGatewayReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListServiceGatewayReqDefaultTypeInternal {
  constexpr ListServiceGatewayReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListServiceGatewayReqDefaultTypeInternal() {}
  union {
    ListServiceGatewayReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListServiceGatewayReqDefaultTypeInternal _ListServiceGatewayReq_default_instance_;
constexpr ListServiceGatewayResp::ListServiceGatewayResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_()
  , result_(0)
{}
struct ListServiceGatewayRespDefaultTypeInternal {
  constexpr ListServiceGatewayRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListServiceGatewayRespDefaultTypeInternal() {}
  union {
    ListServiceGatewayResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListServiceGatewayRespDefaultTypeInternal _ListServiceGatewayResp_default_instance_;
constexpr UpdateShardReq::UpdateShardReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shard_(nullptr){}
struct UpdateShardReqDefaultTypeInternal {
  constexpr UpdateShardReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateShardReqDefaultTypeInternal() {}
  union {
    UpdateShardReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateShardReqDefaultTypeInternal _UpdateShardReq_default_instance_;
constexpr DeleteShardReq::DeleteShardReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteShardReqDefaultTypeInternal {
  constexpr DeleteShardReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteShardReqDefaultTypeInternal() {}
  union {
    DeleteShardReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteShardReqDefaultTypeInternal _DeleteShardReq_default_instance_;
constexpr GetShardReq::GetShardReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetShardReqDefaultTypeInternal {
  constexpr GetShardReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetShardReqDefaultTypeInternal() {}
  union {
    GetShardReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetShardReqDefaultTypeInternal _GetShardReq_default_instance_;
constexpr ShardResp::ShardResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shard_(nullptr)
  , result_(0)
{}
struct ShardRespDefaultTypeInternal {
  constexpr ShardRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardRespDefaultTypeInternal() {}
  union {
    ShardResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardRespDefaultTypeInternal _ShardResp_default_instance_;
constexpr ListShardReq::ListShardReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListShardReqDefaultTypeInternal {
  constexpr ListShardReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListShardReqDefaultTypeInternal() {}
  union {
    ListShardReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListShardReqDefaultTypeInternal _ListShardReq_default_instance_;
constexpr ListShardResp::ListShardResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shard_()
  , result_(0)
{}
struct ListShardRespDefaultTypeInternal {
  constexpr ListShardRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListShardRespDefaultTypeInternal() {}
  union {
    ListShardResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListShardRespDefaultTypeInternal _ListShardResp_default_instance_;
constexpr UpdateTrafficSteeringFunctionReq::UpdateTrafficSteeringFunctionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_steering_function_(nullptr){}
struct UpdateTrafficSteeringFunctionReqDefaultTypeInternal {
  constexpr UpdateTrafficSteeringFunctionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateTrafficSteeringFunctionReqDefaultTypeInternal() {}
  union {
    UpdateTrafficSteeringFunctionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateTrafficSteeringFunctionReqDefaultTypeInternal _UpdateTrafficSteeringFunctionReq_default_instance_;
constexpr DeleteTrafficSteeringFunctionReq::DeleteTrafficSteeringFunctionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTrafficSteeringFunctionReqDefaultTypeInternal {
  constexpr DeleteTrafficSteeringFunctionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTrafficSteeringFunctionReqDefaultTypeInternal() {}
  union {
    DeleteTrafficSteeringFunctionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTrafficSteeringFunctionReqDefaultTypeInternal _DeleteTrafficSteeringFunctionReq_default_instance_;
constexpr GetTrafficSteeringFunctionReq::GetTrafficSteeringFunctionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTrafficSteeringFunctionReqDefaultTypeInternal {
  constexpr GetTrafficSteeringFunctionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTrafficSteeringFunctionReqDefaultTypeInternal() {}
  union {
    GetTrafficSteeringFunctionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTrafficSteeringFunctionReqDefaultTypeInternal _GetTrafficSteeringFunctionReq_default_instance_;
constexpr TrafficSteeringFunctionResp::TrafficSteeringFunctionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_steering_function_(nullptr)
  , result_(0)
{}
struct TrafficSteeringFunctionRespDefaultTypeInternal {
  constexpr TrafficSteeringFunctionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSteeringFunctionRespDefaultTypeInternal() {}
  union {
    TrafficSteeringFunctionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSteeringFunctionRespDefaultTypeInternal _TrafficSteeringFunctionResp_default_instance_;
constexpr ListTrafficSteeringFunctionReq::ListTrafficSteeringFunctionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListTrafficSteeringFunctionReqDefaultTypeInternal {
  constexpr ListTrafficSteeringFunctionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTrafficSteeringFunctionReqDefaultTypeInternal() {}
  union {
    ListTrafficSteeringFunctionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTrafficSteeringFunctionReqDefaultTypeInternal _ListTrafficSteeringFunctionReq_default_instance_;
constexpr ListTrafficSteeringFunctionResp::ListTrafficSteeringFunctionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_steering_function_()
  , result_(0)
{}
struct ListTrafficSteeringFunctionRespDefaultTypeInternal {
  constexpr ListTrafficSteeringFunctionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTrafficSteeringFunctionRespDefaultTypeInternal() {}
  union {
    ListTrafficSteeringFunctionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTrafficSteeringFunctionRespDefaultTypeInternal _ListTrafficSteeringFunctionResp_default_instance_;
constexpr UpdateServiceGatewayUserPlaneReq::UpdateServiceGatewayUserPlaneReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_user_plane_(nullptr){}
struct UpdateServiceGatewayUserPlaneReqDefaultTypeInternal {
  constexpr UpdateServiceGatewayUserPlaneReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateServiceGatewayUserPlaneReqDefaultTypeInternal() {}
  union {
    UpdateServiceGatewayUserPlaneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateServiceGatewayUserPlaneReqDefaultTypeInternal _UpdateServiceGatewayUserPlaneReq_default_instance_;
constexpr DeleteServiceGatewayUserPlaneReq::DeleteServiceGatewayUserPlaneReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteServiceGatewayUserPlaneReqDefaultTypeInternal {
  constexpr DeleteServiceGatewayUserPlaneReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteServiceGatewayUserPlaneReqDefaultTypeInternal() {}
  union {
    DeleteServiceGatewayUserPlaneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteServiceGatewayUserPlaneReqDefaultTypeInternal _DeleteServiceGatewayUserPlaneReq_default_instance_;
constexpr GetServiceGatewayUserPlaneReq::GetServiceGatewayUserPlaneReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetServiceGatewayUserPlaneReqDefaultTypeInternal {
  constexpr GetServiceGatewayUserPlaneReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceGatewayUserPlaneReqDefaultTypeInternal() {}
  union {
    GetServiceGatewayUserPlaneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceGatewayUserPlaneReqDefaultTypeInternal _GetServiceGatewayUserPlaneReq_default_instance_;
constexpr ServiceGatewayUserPlaneResp::ServiceGatewayUserPlaneResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_user_plane_(nullptr)
  , result_(0)
{}
struct ServiceGatewayUserPlaneRespDefaultTypeInternal {
  constexpr ServiceGatewayUserPlaneRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayUserPlaneRespDefaultTypeInternal() {}
  union {
    ServiceGatewayUserPlaneResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayUserPlaneRespDefaultTypeInternal _ServiceGatewayUserPlaneResp_default_instance_;
constexpr ListServiceGatewayUserPlaneReq::ListServiceGatewayUserPlaneReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListServiceGatewayUserPlaneReqDefaultTypeInternal {
  constexpr ListServiceGatewayUserPlaneReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListServiceGatewayUserPlaneReqDefaultTypeInternal() {}
  union {
    ListServiceGatewayUserPlaneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListServiceGatewayUserPlaneReqDefaultTypeInternal _ListServiceGatewayUserPlaneReq_default_instance_;
constexpr ListServiceGatewayUserPlaneResp::ListServiceGatewayUserPlaneResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_gateway_user_plane_()
  , result_(0)
{}
struct ListServiceGatewayUserPlaneRespDefaultTypeInternal {
  constexpr ListServiceGatewayUserPlaneRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListServiceGatewayUserPlaneRespDefaultTypeInternal() {}
  union {
    ListServiceGatewayUserPlaneResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListServiceGatewayUserPlaneRespDefaultTypeInternal _ListServiceGatewayUserPlaneResp_default_instance_;
constexpr UpdateNetworkConnectionReq::UpdateNetworkConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_connection_(nullptr){}
struct UpdateNetworkConnectionReqDefaultTypeInternal {
  constexpr UpdateNetworkConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateNetworkConnectionReqDefaultTypeInternal() {}
  union {
    UpdateNetworkConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateNetworkConnectionReqDefaultTypeInternal _UpdateNetworkConnectionReq_default_instance_;
constexpr DeleteNetworkConnectionReq::DeleteNetworkConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteNetworkConnectionReqDefaultTypeInternal {
  constexpr DeleteNetworkConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteNetworkConnectionReqDefaultTypeInternal() {}
  union {
    DeleteNetworkConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteNetworkConnectionReqDefaultTypeInternal _DeleteNetworkConnectionReq_default_instance_;
constexpr GetNetworkConnectionReq::GetNetworkConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetNetworkConnectionReqDefaultTypeInternal {
  constexpr GetNetworkConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetworkConnectionReqDefaultTypeInternal() {}
  union {
    GetNetworkConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetworkConnectionReqDefaultTypeInternal _GetNetworkConnectionReq_default_instance_;
constexpr NetworkConnectionResp::NetworkConnectionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_connection_(nullptr)
  , result_(0)
{}
struct NetworkConnectionRespDefaultTypeInternal {
  constexpr NetworkConnectionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConnectionRespDefaultTypeInternal() {}
  union {
    NetworkConnectionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConnectionRespDefaultTypeInternal _NetworkConnectionResp_default_instance_;
constexpr ListNetworkConnectionReq::ListNetworkConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListNetworkConnectionReqDefaultTypeInternal {
  constexpr ListNetworkConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNetworkConnectionReqDefaultTypeInternal() {}
  union {
    ListNetworkConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNetworkConnectionReqDefaultTypeInternal _ListNetworkConnectionReq_default_instance_;
constexpr ListNetworkConnectionResp::ListNetworkConnectionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_connection_()
  , result_(0)
{}
struct ListNetworkConnectionRespDefaultTypeInternal {
  constexpr ListNetworkConnectionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNetworkConnectionRespDefaultTypeInternal() {}
  union {
    ListNetworkConnectionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNetworkConnectionRespDefaultTypeInternal _ListNetworkConnectionResp_default_instance_;
constexpr UpdateSessionContextReq::UpdateSessionContextReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_context_(nullptr){}
struct UpdateSessionContextReqDefaultTypeInternal {
  constexpr UpdateSessionContextReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSessionContextReqDefaultTypeInternal() {}
  union {
    UpdateSessionContextReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSessionContextReqDefaultTypeInternal _UpdateSessionContextReq_default_instance_;
constexpr DeleteSessionContextReq::DeleteSessionContextReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteSessionContextReqDefaultTypeInternal {
  constexpr DeleteSessionContextReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSessionContextReqDefaultTypeInternal() {}
  union {
    DeleteSessionContextReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSessionContextReqDefaultTypeInternal _DeleteSessionContextReq_default_instance_;
constexpr GetSessionContextReq::GetSessionContextReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSessionContextReqDefaultTypeInternal {
  constexpr GetSessionContextReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSessionContextReqDefaultTypeInternal() {}
  union {
    GetSessionContextReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSessionContextReqDefaultTypeInternal _GetSessionContextReq_default_instance_;
constexpr SessionContextResp::SessionContextResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_context_(nullptr)
  , result_(0)
{}
struct SessionContextRespDefaultTypeInternal {
  constexpr SessionContextRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionContextRespDefaultTypeInternal() {}
  union {
    SessionContextResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionContextRespDefaultTypeInternal _SessionContextResp_default_instance_;
constexpr ListSessionContextReq::ListSessionContextReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct ListSessionContextReqDefaultTypeInternal {
  constexpr ListSessionContextReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionContextReqDefaultTypeInternal() {}
  union {
    ListSessionContextReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionContextReqDefaultTypeInternal _ListSessionContextReq_default_instance_;
constexpr ListSessionContextResp::ListSessionContextResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_context_(){}
struct ListSessionContextRespDefaultTypeInternal {
  constexpr ListSessionContextRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionContextRespDefaultTypeInternal() {}
  union {
    ListSessionContextResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionContextRespDefaultTypeInternal _ListSessionContextResp_default_instance_;
constexpr ServiceGatewayUserPlane_Spec::ServiceGatewayUserPlane_Spec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_service_group_()
  , access_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , core_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , core_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_session_count_(0)
  , maintenence_(false){}
struct ServiceGatewayUserPlane_SpecDefaultTypeInternal {
  constexpr ServiceGatewayUserPlane_SpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayUserPlane_SpecDefaultTypeInternal() {}
  union {
    ServiceGatewayUserPlane_Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayUserPlane_SpecDefaultTypeInternal _ServiceGatewayUserPlane_Spec_default_instance_;
constexpr ServiceGatewayUserPlane_Status::ServiceGatewayUserPlane_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : network_connection_()
  , _network_connection_cached_byte_size_(0)
  , allocated_session_count_(0){}
struct ServiceGatewayUserPlane_StatusDefaultTypeInternal {
  constexpr ServiceGatewayUserPlane_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayUserPlane_StatusDefaultTypeInternal() {}
  union {
    ServiceGatewayUserPlane_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayUserPlane_StatusDefaultTypeInternal _ServiceGatewayUserPlane_Status_default_instance_;
constexpr ServiceGatewayUserPlane::ServiceGatewayUserPlane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_gateway_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct ServiceGatewayUserPlaneDefaultTypeInternal {
  constexpr ServiceGatewayUserPlaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayUserPlaneDefaultTypeInternal() {}
  union {
    ServiceGatewayUserPlane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayUserPlaneDefaultTypeInternal _ServiceGatewayUserPlane_default_instance_;
constexpr Shard_Spec::Shard_Spec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desired_network_connection_()
  , desired_service_gateway_user_plane_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_qos_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_session_count_(0){}
struct Shard_SpecDefaultTypeInternal {
  constexpr Shard_SpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Shard_SpecDefaultTypeInternal() {}
  union {
    Shard_Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Shard_SpecDefaultTypeInternal _Shard_Spec_default_instance_;
constexpr Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Shard_Status_TsfNetworkConnectionEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Shard_Status_TsfNetworkConnectionEntry_DoNotUseDefaultTypeInternal {
  constexpr Shard_Status_TsfNetworkConnectionEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Shard_Status_TsfNetworkConnectionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Shard_Status_TsfNetworkConnectionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Shard_Status_TsfNetworkConnectionEntry_DoNotUseDefaultTypeInternal _Shard_Status_TsfNetworkConnectionEntry_DoNotUse_default_instance_;
constexpr Shard_Status::Shard_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tsf_network_connection_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ip_prefixes_()
  , current_service_gateway_user_plane_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Shard_StatusDefaultTypeInternal {
  constexpr Shard_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Shard_StatusDefaultTypeInternal() {}
  union {
    Shard_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Shard_StatusDefaultTypeInternal _Shard_Status_default_instance_;
constexpr Shard::Shard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct ShardDefaultTypeInternal {
  constexpr ShardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShardDefaultTypeInternal() {}
  union {
    Shard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShardDefaultTypeInternal _Shard_default_instance_;
constexpr TrafficSteeringFunction_Spec::TrafficSteeringFunction_Spec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TrafficSteeringFunction_SpecDefaultTypeInternal {
  constexpr TrafficSteeringFunction_SpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSteeringFunction_SpecDefaultTypeInternal() {}
  union {
    TrafficSteeringFunction_Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSteeringFunction_SpecDefaultTypeInternal _TrafficSteeringFunction_Spec_default_instance_;
constexpr TrafficSteeringFunction::TrafficSteeringFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , spec_(nullptr){}
struct TrafficSteeringFunctionDefaultTypeInternal {
  constexpr TrafficSteeringFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficSteeringFunctionDefaultTypeInternal() {}
  union {
    TrafficSteeringFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficSteeringFunctionDefaultTypeInternal _TrafficSteeringFunction_default_instance_;
constexpr ServiceGateway::ServiceGateway(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct ServiceGatewayDefaultTypeInternal {
  constexpr ServiceGatewayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceGatewayDefaultTypeInternal() {}
  union {
    ServiceGateway _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceGatewayDefaultTypeInternal _ServiceGateway_default_instance_;
constexpr NetworkConnection_Spec::NetworkConnection_Spec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_steering_function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_gateway_user_plane_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct NetworkConnection_SpecDefaultTypeInternal {
  constexpr NetworkConnection_SpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConnection_SpecDefaultTypeInternal() {}
  union {
    NetworkConnection_Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConnection_SpecDefaultTypeInternal _NetworkConnection_Spec_default_instance_;
constexpr NetworkConnection_Status::NetworkConnection_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nc_traffic_steering_function_status_(0)

  , nc_service_gateway_user_plane_status_(0)
{}
struct NetworkConnection_StatusDefaultTypeInternal {
  constexpr NetworkConnection_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConnection_StatusDefaultTypeInternal() {}
  union {
    NetworkConnection_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConnection_StatusDefaultTypeInternal _NetworkConnection_Status_default_instance_;
constexpr NetworkConnection::NetworkConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct NetworkConnectionDefaultTypeInternal {
  constexpr NetworkConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConnectionDefaultTypeInternal() {}
  union {
    NetworkConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConnectionDefaultTypeInternal _NetworkConnection_default_instance_;
constexpr VxlanConnection_Vtep::VxlanConnection_Vtep(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , udp_port_(0){}
struct VxlanConnection_VtepDefaultTypeInternal {
  constexpr VxlanConnection_VtepDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VxlanConnection_VtepDefaultTypeInternal() {}
  union {
    VxlanConnection_Vtep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VxlanConnection_VtepDefaultTypeInternal _VxlanConnection_Vtep_default_instance_;
constexpr VxlanConnection::VxlanConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_steering_function_vni_(nullptr)
  , service_gateway_user_plane_vni_(nullptr)
  , vni_(0){}
struct VxlanConnectionDefaultTypeInternal {
  constexpr VxlanConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VxlanConnectionDefaultTypeInternal() {}
  union {
    VxlanConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VxlanConnectionDefaultTypeInternal _VxlanConnection_default_instance_;
constexpr SessionContext_Spec::SessionContext_Spec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_service_group_()
  , traffic_steering_function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desired_shard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_qos_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_filter_(nullptr)
  , context_type_(0)
{}
struct SessionContext_SpecDefaultTypeInternal {
  constexpr SessionContext_SpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionContext_SpecDefaultTypeInternal() {}
  union {
    SessionContext_Spec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionContext_SpecDefaultTypeInternal _SessionContext_Spec_default_instance_;
constexpr SessionContext_Status::SessionContext_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_shard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SessionContext_StatusDefaultTypeInternal {
  constexpr SessionContext_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionContext_StatusDefaultTypeInternal() {}
  union {
    SessionContext_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionContext_StatusDefaultTypeInternal _SessionContext_Status_default_instance_;
constexpr SessionContext::SessionContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct SessionContextDefaultTypeInternal {
  constexpr SessionContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionContextDefaultTypeInternal() {}
  union {
    SessionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionContextDefaultTypeInternal _SessionContext_default_instance_;
constexpr SessionFilter::SessionFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , circuit_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , svlan_(0)
  , cvlan_(0){}
struct SessionFilterDefaultTypeInternal {
  constexpr SessionFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionFilterDefaultTypeInternal() {}
  union {
    SessionFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionFilterDefaultTypeInternal _SessionFilter_default_instance_;
}  // namespace sss
}  // namespace bbf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sssupsf_2eproto[61];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sssupsf_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sssupsf_2eproto = nullptr;

const uint32_t TableStruct_sssupsf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, last_updated_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, created_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, delete_requested_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, deleted_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, item_status_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::MetaData, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListFilter, id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SubscribeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SubscribeReq, subscription_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SubscribeReq, id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Update, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Update, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::LookupReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::LookupReq, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::LookupResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::LookupResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::LookupResp, session_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateServiceGatewayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateServiceGatewayReq, service_gateway_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteServiceGatewayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteServiceGatewayReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetServiceGatewayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetServiceGatewayReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayResp, service_gateway_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayResp, service_gateway_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateShardReq, shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteShardReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetShardReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ShardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ShardResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ShardResp, shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListShardReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListShardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListShardResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListShardResp, shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateTrafficSteeringFunctionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateTrafficSteeringFunctionReq, traffic_steering_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteTrafficSteeringFunctionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteTrafficSteeringFunctionReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetTrafficSteeringFunctionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetTrafficSteeringFunctionReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunctionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunctionResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunctionResp, traffic_steering_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListTrafficSteeringFunctionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListTrafficSteeringFunctionReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListTrafficSteeringFunctionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListTrafficSteeringFunctionResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListTrafficSteeringFunctionResp, traffic_steering_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateServiceGatewayUserPlaneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateServiceGatewayUserPlaneReq, service_gateway_user_plane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteServiceGatewayUserPlaneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteServiceGatewayUserPlaneReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetServiceGatewayUserPlaneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetServiceGatewayUserPlaneReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlaneResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlaneResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlaneResp, service_gateway_user_plane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayUserPlaneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayUserPlaneReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayUserPlaneResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayUserPlaneResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListServiceGatewayUserPlaneResp, service_gateway_user_plane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateNetworkConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateNetworkConnectionReq, network_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteNetworkConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteNetworkConnectionReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetNetworkConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetNetworkConnectionReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnectionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnectionResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnectionResp, network_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListNetworkConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListNetworkConnectionReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListNetworkConnectionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListNetworkConnectionResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListNetworkConnectionResp, network_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateSessionContextReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::UpdateSessionContextReq, session_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteSessionContextReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::DeleteSessionContextReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetSessionContextReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::GetSessionContextReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContextResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContextResp, result_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContextResp, session_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListSessionContextReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListSessionContextReq, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListSessionContextResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ListSessionContextResp, session_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, max_session_count_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, supported_service_group_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, maintenence_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, access_ip_address_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, core_ip_address_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, access_mac_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Spec, core_mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Status, allocated_session_count_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane_Status, network_connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, service_gateway_id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, metadata_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, spec_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGatewayUserPlane, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Spec, max_session_count_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Spec, desired_service_gateway_user_plane_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Spec, desired_network_connection_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Spec, required_qos_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status, current_service_gateway_user_plane_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status, tsf_network_connection_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard_Status, ip_prefixes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard, metadata_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard, spec_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::Shard, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction_Spec, ip_address_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction_Spec, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction, metadata_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::TrafficSteeringFunction, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGateway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGateway, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::ServiceGateway, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Spec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Spec, traffic_steering_function_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Spec, service_gateway_user_plane_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Spec, transport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Status, nc_traffic_steering_function_status_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection_Status, nc_service_gateway_user_plane_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection, metadata_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection, spec_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::NetworkConnection, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection_Vtep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection_Vtep, ip_address_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection_Vtep, udp_port_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection_Vtep, mac_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection, traffic_steering_function_vni_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection, service_gateway_user_plane_vni_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::VxlanConnection, vni_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, traffic_steering_function_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, desired_shard_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, required_service_group_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, required_qos_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, context_type_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Spec, session_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext_Status, current_shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext, id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext, metadata_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext, spec_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionContext, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, mac_address_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, svlan_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, cvlan_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, circuit_id_),
  PROTOBUF_FIELD_OFFSET(::bbf::sss::SessionFilter, remote_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bbf::sss::MetaData)},
  { 12, -1, -1, sizeof(::bbf::sss::ListFilter)},
  { 19, -1, -1, sizeof(::bbf::sss::SubscribeReq)},
  { 27, -1, -1, sizeof(::bbf::sss::Update)},
  { 40, -1, -1, sizeof(::bbf::sss::LookupReq)},
  { 47, -1, -1, sizeof(::bbf::sss::LookupResp)},
  { 55, -1, -1, sizeof(::bbf::sss::UpdateServiceGatewayReq)},
  { 62, -1, -1, sizeof(::bbf::sss::DeleteServiceGatewayReq)},
  { 69, -1, -1, sizeof(::bbf::sss::GetServiceGatewayReq)},
  { 76, -1, -1, sizeof(::bbf::sss::ServiceGatewayResp)},
  { 84, -1, -1, sizeof(::bbf::sss::ListServiceGatewayReq)},
  { 91, -1, -1, sizeof(::bbf::sss::ListServiceGatewayResp)},
  { 99, -1, -1, sizeof(::bbf::sss::UpdateShardReq)},
  { 106, -1, -1, sizeof(::bbf::sss::DeleteShardReq)},
  { 113, -1, -1, sizeof(::bbf::sss::GetShardReq)},
  { 120, -1, -1, sizeof(::bbf::sss::ShardResp)},
  { 128, -1, -1, sizeof(::bbf::sss::ListShardReq)},
  { 135, -1, -1, sizeof(::bbf::sss::ListShardResp)},
  { 143, -1, -1, sizeof(::bbf::sss::UpdateTrafficSteeringFunctionReq)},
  { 150, -1, -1, sizeof(::bbf::sss::DeleteTrafficSteeringFunctionReq)},
  { 157, -1, -1, sizeof(::bbf::sss::GetTrafficSteeringFunctionReq)},
  { 164, -1, -1, sizeof(::bbf::sss::TrafficSteeringFunctionResp)},
  { 172, -1, -1, sizeof(::bbf::sss::ListTrafficSteeringFunctionReq)},
  { 179, -1, -1, sizeof(::bbf::sss::ListTrafficSteeringFunctionResp)},
  { 187, -1, -1, sizeof(::bbf::sss::UpdateServiceGatewayUserPlaneReq)},
  { 194, -1, -1, sizeof(::bbf::sss::DeleteServiceGatewayUserPlaneReq)},
  { 201, -1, -1, sizeof(::bbf::sss::GetServiceGatewayUserPlaneReq)},
  { 208, -1, -1, sizeof(::bbf::sss::ServiceGatewayUserPlaneResp)},
  { 216, -1, -1, sizeof(::bbf::sss::ListServiceGatewayUserPlaneReq)},
  { 223, -1, -1, sizeof(::bbf::sss::ListServiceGatewayUserPlaneResp)},
  { 231, -1, -1, sizeof(::bbf::sss::UpdateNetworkConnectionReq)},
  { 238, -1, -1, sizeof(::bbf::sss::DeleteNetworkConnectionReq)},
  { 245, -1, -1, sizeof(::bbf::sss::GetNetworkConnectionReq)},
  { 252, -1, -1, sizeof(::bbf::sss::NetworkConnectionResp)},
  { 260, -1, -1, sizeof(::bbf::sss::ListNetworkConnectionReq)},
  { 267, -1, -1, sizeof(::bbf::sss::ListNetworkConnectionResp)},
  { 275, -1, -1, sizeof(::bbf::sss::UpdateSessionContextReq)},
  { 282, -1, -1, sizeof(::bbf::sss::DeleteSessionContextReq)},
  { 289, -1, -1, sizeof(::bbf::sss::GetSessionContextReq)},
  { 296, -1, -1, sizeof(::bbf::sss::SessionContextResp)},
  { 304, -1, -1, sizeof(::bbf::sss::ListSessionContextReq)},
  { 311, -1, -1, sizeof(::bbf::sss::ListSessionContextResp)},
  { 318, -1, -1, sizeof(::bbf::sss::ServiceGatewayUserPlane_Spec)},
  { 331, -1, -1, sizeof(::bbf::sss::ServiceGatewayUserPlane_Status)},
  { 339, -1, -1, sizeof(::bbf::sss::ServiceGatewayUserPlane)},
  { 350, -1, -1, sizeof(::bbf::sss::Shard_Spec)},
  { 360, 368, -1, sizeof(::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse)},
  { 370, -1, -1, sizeof(::bbf::sss::Shard_Status)},
  { 379, -1, -1, sizeof(::bbf::sss::Shard)},
  { 389, -1, -1, sizeof(::bbf::sss::TrafficSteeringFunction_Spec)},
  { 397, -1, -1, sizeof(::bbf::sss::TrafficSteeringFunction)},
  { 406, -1, -1, sizeof(::bbf::sss::ServiceGateway)},
  { 414, -1, -1, sizeof(::bbf::sss::NetworkConnection_Spec)},
  { 424, -1, -1, sizeof(::bbf::sss::NetworkConnection_Status)},
  { 432, -1, -1, sizeof(::bbf::sss::NetworkConnection)},
  { 442, -1, -1, sizeof(::bbf::sss::VxlanConnection_Vtep)},
  { 451, -1, -1, sizeof(::bbf::sss::VxlanConnection)},
  { 460, -1, -1, sizeof(::bbf::sss::SessionContext_Spec)},
  { 472, -1, -1, sizeof(::bbf::sss::SessionContext_Status)},
  { 479, -1, -1, sizeof(::bbf::sss::SessionContext)},
  { 489, -1, -1, sizeof(::bbf::sss::SessionFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_MetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SubscribeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_LookupReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_LookupResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateServiceGatewayReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteServiceGatewayReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetServiceGatewayReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGatewayResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListServiceGatewayReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListServiceGatewayResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateShardReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteShardReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetShardReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ShardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListShardReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListShardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateTrafficSteeringFunctionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteTrafficSteeringFunctionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetTrafficSteeringFunctionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_TrafficSteeringFunctionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListTrafficSteeringFunctionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListTrafficSteeringFunctionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateServiceGatewayUserPlaneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteServiceGatewayUserPlaneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetServiceGatewayUserPlaneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGatewayUserPlaneResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListServiceGatewayUserPlaneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListServiceGatewayUserPlaneResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateNetworkConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteNetworkConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetNetworkConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_NetworkConnectionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListNetworkConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListNetworkConnectionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_UpdateSessionContextReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_DeleteSessionContextReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_GetSessionContextReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SessionContextResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListSessionContextReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ListSessionContextResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGatewayUserPlane_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGatewayUserPlane_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGatewayUserPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_Shard_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_Shard_Status_TsfNetworkConnectionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_Shard_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_Shard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_TrafficSteeringFunction_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_TrafficSteeringFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_ServiceGateway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_NetworkConnection_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_NetworkConnection_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_NetworkConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_VxlanConnection_Vtep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_VxlanConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SessionContext_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SessionContext_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SessionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bbf::sss::_SessionFilter_default_instance_),
};

const char descriptor_table_protodef_sssupsf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsssupsf.proto\022\007bbf.sss\032\037google/protobu"
  "f/timestamp.proto\"\204\002\n\010MetaData\0220\n\014last_u"
  "pdated\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "\022+\n\007created\030\002 \001(\0132\032.google.protobuf.Time"
  "stamp\0224\n\020delete_requested\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\022+\n\007deleted\030\004 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022(\n\013item_status\030"
  "\005 \001(\0162\023.bbf.sss.ItemStatus\022\014\n\004name\030\006 \001(\t"
  "\"\035\n\nListFilter\022\017\n\007id_list\030\002 \003(\t\"\204\002\n\014Subs"
  "cribeReq\022<\n\014subscription\030\001 \003(\0162&.bbf.sss"
  ".SubscribeReq.SubscriptionType\022\017\n\007id_lis"
  "t\030\002 \003(\t\"\244\001\n\020SubscriptionType\022\n\n\006shards\020\000"
  "\022\024\n\020session_contexts\020\001\022\027\n\023network_connec"
  "tions\020\002\022\037\n\033service_gateway_user_planes\020\003"
  "\022\036\n\032traffic_steering_functions\020\004\022\024\n\020serv"
  "ice_gateways\020\005\"\342\002\n\006Update\022\037\n\005shard\030\001 \001(\013"
  "2\016.bbf.sss.ShardH\000\0222\n\017session_context\030\002 "
  "\001(\0132\027.bbf.sss.SessionContextH\000\0228\n\022networ"
  "k_connection\030\003 \001(\0132\032.bbf.sss.NetworkConn"
  "ectionH\000\022F\n\032service_gateway_user_plane\030\004"
  " \001(\0132 .bbf.sss.ServiceGatewayUserPlaneH\000"
  "\022E\n\031traffic_steering_function\030\005 \001(\0132 .bb"
  "f.sss.TrafficSteeringFunctionH\000\0222\n\017servi"
  "ce_gateway\030\006 \001(\0132\027.bbf.sss.ServiceGatewa"
  "yH\000B\006\n\004item\"7\n\tLookupReq\022*\n\004spec\030\002 \001(\0132\034"
  ".bbf.sss.SessionContext.Spec\"_\n\nLookupRe"
  "sp\022\037\n\006result\030\001 \001(\0162\017.bbf.sss.Result\0220\n\017s"
  "ession_context\030\002 \001(\0132\027.bbf.sss.SessionCo"
  "ntext\"K\n\027UpdateServiceGatewayReq\0220\n\017serv"
  "ice_gateway\030\001 \001(\0132\027.bbf.sss.ServiceGatew"
  "ay\"%\n\027DeleteServiceGatewayReq\022\n\n\002id\030\001 \001("
  "\t\"\"\n\024GetServiceGatewayReq\022\n\n\002id\030\001 \001(\t\"g\n"
  "\022ServiceGatewayResp\022\037\n\006result\030\001 \001(\0162\017.bb"
  "f.sss.Result\0220\n\017service_gateway\030\002 \001(\0132\027."
  "bbf.sss.ServiceGateway\"<\n\025ListServiceGat"
  "ewayReq\022#\n\006filter\030\001 \001(\0132\023.bbf.sss.ListFi"
  "lter\"k\n\026ListServiceGatewayResp\022\037\n\006result"
  "\030\001 \001(\0162\017.bbf.sss.Result\0220\n\017service_gatew"
  "ay\030\002 \003(\0132\027.bbf.sss.ServiceGateway\"/\n\016Upd"
  "ateShardReq\022\035\n\005shard\030\001 \001(\0132\016.bbf.sss.Sha"
  "rd\"\034\n\016DeleteShardReq\022\n\n\002id\030\001 \001(\t\"\031\n\013GetS"
  "hardReq\022\n\n\002id\030\001 \001(\t\"K\n\tShardResp\022\037\n\006resu"
  "lt\030\001 \001(\0162\017.bbf.sss.Result\022\035\n\005shard\030\002 \001(\013"
  "2\016.bbf.sss.Shard\"3\n\014ListShardReq\022#\n\006filt"
  "er\030\001 \001(\0132\023.bbf.sss.ListFilter\"O\n\rListSha"
  "rdResp\022\037\n\006result\030\001 \001(\0162\017.bbf.sss.Result\022"
  "\035\n\005shard\030\002 \003(\0132\016.bbf.sss.Shard\"g\n Update"
  "TrafficSteeringFunctionReq\022C\n\031traffic_st"
  "eering_function\030\001 \001(\0132 .bbf.sss.TrafficS"
  "teeringFunction\".\n DeleteTrafficSteering"
  "FunctionReq\022\n\n\002id\030\001 \001(\t\"+\n\035GetTrafficSte"
  "eringFunctionReq\022\n\n\002id\030\001 \001(\t\"\203\001\n\033Traffic"
  "SteeringFunctionResp\022\037\n\006result\030\001 \001(\0162\017.b"
  "bf.sss.Result\022C\n\031traffic_steering_functi"
  "on\030\002 \001(\0132 .bbf.sss.TrafficSteeringFuncti"
  "on\"E\n\036ListTrafficSteeringFunctionReq\022#\n\006"
  "filter\030\001 \001(\0132\023.bbf.sss.ListFilter\"\207\001\n\037Li"
  "stTrafficSteeringFunctionResp\022\037\n\006result\030"
  "\001 \001(\0162\017.bbf.sss.Result\022C\n\031traffic_steeri"
  "ng_function\030\002 \003(\0132 .bbf.sss.TrafficSteer"
  "ingFunction\"h\n UpdateServiceGatewayUserP"
  "laneReq\022D\n\032service_gateway_user_plane\030\001 "
  "\001(\0132 .bbf.sss.ServiceGatewayUserPlane\".\n"
  " DeleteServiceGatewayUserPlaneReq\022\n\n\002id\030"
  "\001 \001(\t\"+\n\035GetServiceGatewayUserPlaneReq\022\n"
  "\n\002id\030\001 \001(\t\"\204\001\n\033ServiceGatewayUserPlaneRe"
  "sp\022\037\n\006result\030\001 \001(\0162\017.bbf.sss.Result\022D\n\032s"
  "ervice_gateway_user_plane\030\002 \001(\0132 .bbf.ss"
  "s.ServiceGatewayUserPlane\"E\n\036ListService"
  "GatewayUserPlaneReq\022#\n\006filter\030\002 \001(\0132\023.bb"
  "f.sss.ListFilter\"\210\001\n\037ListServiceGatewayU"
  "serPlaneResp\022\037\n\006result\030\001 \001(\0162\017.bbf.sss.R"
  "esult\022D\n\032service_gateway_user_plane\030\002 \003("
  "\0132 .bbf.sss.ServiceGatewayUserPlane\"T\n\032U"
  "pdateNetworkConnectionReq\0226\n\022network_con"
  "nection\030\001 \001(\0132\032.bbf.sss.NetworkConnectio"
  "n\"(\n\032DeleteNetworkConnectionReq\022\n\n\002id\030\001 "
  "\001(\t\"%\n\027GetNetworkConnectionReq\022\n\n\002id\030\001 \001"
  "(\t\"p\n\025NetworkConnectionResp\022\037\n\006result\030\001 "
  "\001(\0162\017.bbf.sss.Result\0226\n\022network_connecti"
  "on\030\002 \001(\0132\032.bbf.sss.NetworkConnection\"\?\n\030"
  "ListNetworkConnectionReq\022#\n\006filter\030\001 \001(\013"
  "2\023.bbf.sss.ListFilter\"t\n\031ListNetworkConn"
  "ectionResp\022\037\n\006result\030\001 \001(\0162\017.bbf.sss.Res"
  "ult\0226\n\022network_connection\030\002 \003(\0132\032.bbf.ss"
  "s.NetworkConnection\"K\n\027UpdateSessionCont"
  "extReq\0220\n\017session_context\030\001 \001(\0132\027.bbf.ss"
  "s.SessionContext\"%\n\027DeleteSessionContext"
  "Req\022\n\n\002id\030\001 \001(\t\"\"\n\024GetSessionContextReq\022"
  "\n\n\002id\030\001 \001(\t\"g\n\022SessionContextResp\022\037\n\006res"
  "ult\030\001 \001(\0162\017.bbf.sss.Result\0220\n\017session_co"
  "ntext\030\002 \001(\0132\027.bbf.sss.SessionContext\"<\n\025"
  "ListSessionContextReq\022#\n\006filter\030\001 \001(\0132\023."
  "bbf.sss.ListFilter\"J\n\026ListSessionContext"
  "Resp\0220\n\017session_context\030\001 \003(\0132\027.bbf.sss."
  "SessionContext\"\323\003\n\027ServiceGatewayUserPla"
  "ne\022\n\n\002id\030\001 \001(\t\022\032\n\022service_gateway_id\030\002 \001"
  "(\t\022#\n\010metadata\030\003 \001(\0132\021.bbf.sss.MetaData\022"
  "3\n\004spec\030\004 \001(\0132%.bbf.sss.ServiceGatewayUs"
  "erPlane.Spec\0227\n\006status\030\005 \001(\0132\'.bbf.sss.S"
  "erviceGatewayUserPlane.Status\032\265\001\n\004Spec\022\031"
  "\n\021max_session_count\030\001 \001(\005\022\037\n\027supported_s"
  "ervice_group\030\002 \003(\t\022\023\n\013maintenence\030\003 \001(\010\022"
  "\032\n\021access_ip_address\030\255M \001(\t\022\030\n\017core_ip_a"
  "ddress\030\256M \001(\t\022\023\n\naccess_mac\030\257M \001(\t\022\021\n\010co"
  "re_mac\030\260M \001(\t\032E\n\006Status\022\037\n\027allocated_ses"
  "sion_count\030\001 \001(\005\022\032\n\022network_connection\030\002"
  " \003(\005\"\346\003\n\005Shard\022\n\n\002id\030\001 \001(\t\022#\n\010metadata\030\002"
  " \001(\0132\021.bbf.sss.MetaData\022!\n\004spec\030\003 \001(\0132\023."
  "bbf.sss.Shard.Spec\022%\n\006status\030\004 \001(\0132\025.bbf"
  ".sss.Shard.Status\032\207\001\n\004Spec\022\031\n\021max_sessio"
  "n_count\030\001 \001(\005\022*\n\"desired_service_gateway"
  "_user_plane\030\002 \001(\t\022\"\n\032desired_network_con"
  "nection\030\003 \003(\t\022\024\n\014required_qos\030\004 \001(\t\032\327\001\n\006"
  "Status\022*\n\"current_service_gateway_user_p"
  "lane\030\001 \001(\t\022O\n\026tsf_network_connection\030\002 \003"
  "(\0132/.bbf.sss.Shard.Status.TsfNetworkConn"
  "ectionEntry\022\023\n\013ip_prefixes\030\003 \003(\t\032;\n\031TsfN"
  "etworkConnectionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"\252\001\n\027TrafficSteeringFunctio"
  "n\022\n\n\002id\030\001 \001(\t\022#\n\010metadata\030\002 \001(\0132\021.bbf.ss"
  "s.MetaData\0223\n\004spec\030\003 \001(\0132%.bbf.sss.Traff"
  "icSteeringFunction.Spec\032)\n\004Spec\022\023\n\nip_ad"
  "dress\030\255M \001(\t\022\014\n\003mac\030\257M \001(\t\"A\n\016ServiceGat"
  "eway\022\n\n\002id\030\001 \001(\t\022#\n\010metadata\030\002 \001(\0132\021.bbf"
  ".sss.MetaData\"\257\004\n\021NetworkConnection\022\n\n\002i"
  "d\030\001 \001(\t\022#\n\010metadata\030\002 \001(\0132\021.bbf.sss.Meta"
  "Data\022-\n\004spec\030\003 \001(\0132\037.bbf.sss.NetworkConn"
  "ection.Spec\0221\n\006status\030\004 \001(\0132!.bbf.sss.Ne"
  "tworkConnection.Status\032\205\001\n\004Spec\022!\n\031traff"
  "ic_steering_function\030\001 \001(\t\022\"\n\032service_ga"
  "teway_user_plane\030\002 \001(\t\022)\n\005vxlan\030\003 \001(\0132\030."
  "bbf.sss.VxlanConnectionH\000B\013\n\ttransport\032\376"
  "\001\n\006Status\022_\n#nc_traffic_steering_functio"
  "n_status\030\001 \001(\01622.bbf.sss.NetworkConnecti"
  "on.Status.NcEndpointStatus\022`\n$nc_service"
  "_gateway_user_plane_status\030\002 \001(\01622.bbf.s"
  "ss.NetworkConnection.Status.NcEndpointSt"
  "atus\"1\n\020NcEndpointStatus\022\013\n\007UNKNOWN\020\000\022\006\n"
  "\002UP\020\001\022\010\n\004DOWN\020\002\"\357\001\n\017VxlanConnection\022D\n\035t"
  "raffic_steering_function_vni\030\001 \001(\0132\035.bbf"
  ".sss.VxlanConnection.Vtep\022E\n\036service_gat"
  "eway_user_plane_vni\030\002 \001(\0132\035.bbf.sss.Vxla"
  "nConnection.Vtep\022\013\n\003vni\030\003 \001(\005\032B\n\004Vtep\022\022\n"
  "\nip_address\030\001 \001(\t\022\020\n\010udp_port\030\002 \001(\005\022\024\n\013m"
  "ac_address\030\257M \001(\t\"\330\003\n\016SessionContext\022\n\n\002"
  "id\030\001 \001(\t\022#\n\010metadata\030\002 \001(\0132\021.bbf.sss.Met"
  "aData\022*\n\004spec\030\003 \001(\0132\034.bbf.sss.SessionCon"
  "text.Spec\022.\n\006status\030\004 \001(\0132\036.bbf.sss.Sess"
  "ionContext.Status\032\227\002\n\004Spec\022!\n\031traffic_st"
  "eering_function\030\001 \001(\t\022\025\n\rdesired_shard\030\002"
  " \001(\t\022\036\n\026required_service_group\030\003 \003(\t\022\024\n\014"
  "required_qos\030\004 \001(\t\022>\n\014context_type\030\005 \001(\016"
  "2(.bbf.sss.SessionContext.Spec.ContextTy"
  "pe\022.\n\016session_filter\030\006 \001(\0132\026.bbf.sss.Ses"
  "sionFilter\"/\n\013ContextType\022\013\n\007DEFAULT\020\000\022\t"
  "\n\005PPPOE\020\001\022\010\n\004IPOE\020\002\032\037\n\006Status\022\025\n\rcurrent"
  "_shard\030\002 \001(\t\"i\n\rSessionFilter\022\023\n\013mac_add"
  "ress\030\001 \001(\t\022\r\n\005svlan\030\002 \001(\005\022\r\n\005cvlan\030\003 \001(\005"
  "\022\022\n\ncircuit_id\030\004 \001(\t\022\021\n\tremote_id\030\005 \001(\t*"
  "\037\n\006Result\022\013\n\007success\020\000\022\010\n\004fail\020\001*\\\n\nItem"
  "Status\022\013\n\007unknown\020\000\022\n\n\006active\020\001\022\014\n\010updat"
  "ing\020\002\022\014\n\010deleting\020\003\022\013\n\007deleted\020\004\022\014\n\010inac"
  "tive\020\0052\301\022\n\007sssUpsf\0227\n\tSubscribe\022\025.bbf.ss"
  "s.SubscribeReq\032\017.bbf.sss.Update\"\0000\001\022<\n\013U"
  "pdateShard\022\027.bbf.sss.UpdateShardReq\032\022.bb"
  "f.sss.ShardResp\"\000\022<\n\013DeleteShard\022\027.bbf.s"
  "ss.DeleteShardReq\032\022.bbf.sss.ShardResp\"\000\022"
  "6\n\010GetShard\022\024.bbf.sss.GetShardReq\032\022.bbf."
  "sss.ShardResp\"\000\022=\n\nListShards\022\025.bbf.sss."
  "ListShardReq\032\026.bbf.sss.ListShardResp\"\000\022r"
  "\n\035UpdateTrafficSteeringFunction\022).bbf.ss"
  "s.UpdateTrafficSteeringFunctionReq\032$.bbf"
  ".sss.TrafficSteeringFunctionResp\"\000\022r\n\035De"
  "leteTrafficSteeringFunction\022).bbf.sss.De"
  "leteTrafficSteeringFunctionReq\032$.bbf.sss"
  ".TrafficSteeringFunctionResp\"\000\022l\n\032GetTra"
  "fficSteeringFunction\022&.bbf.sss.GetTraffi"
  "cSteeringFunctionReq\032$.bbf.sss.TrafficSt"
  "eeringFunctionResp\"\000\022s\n\034ListTrafficSteer"
  "ingFunctions\022\'.bbf.sss.ListTrafficSteeri"
  "ngFunctionReq\032(.bbf.sss.ListTrafficSteer"
  "ingFunctionResp\"\000\022r\n\035UpdateServiceGatewa"
  "yUserPlane\022).bbf.sss.UpdateServiceGatewa"
  "yUserPlaneReq\032$.bbf.sss.ServiceGatewayUs"
  "erPlaneResp\"\000\022r\n\035DeleteServiceGatewayUse"
  "rPlane\022).bbf.sss.DeleteServiceGatewayUse"
  "rPlaneReq\032$.bbf.sss.ServiceGatewayUserPl"
  "aneResp\"\000\022l\n\032GetServiceGatewayUserPlane\022"
  "&.bbf.sss.GetServiceGatewayUserPlaneReq\032"
  "$.bbf.sss.ServiceGatewayUserPlaneResp\"\000\022"
  "s\n\034ListServiceGatewayUserPlanes\022\'.bbf.ss"
  "s.ListServiceGatewayUserPlaneReq\032(.bbf.s"
  "ss.ListServiceGatewayUserPlaneResp\"\000\022`\n\027"
  "UpdateNetworkConnection\022#.bbf.sss.Update"
  "NetworkConnectionReq\032\036.bbf.sss.NetworkCo"
  "nnectionResp\"\000\022`\n\027DeleteNetworkConnectio"
  "n\022#.bbf.sss.DeleteNetworkConnectionReq\032\036"
  ".bbf.sss.NetworkConnectionResp\"\000\022Z\n\024GetN"
  "etworkConnection\022 .bbf.sss.GetNetworkCon"
  "nectionReq\032\036.bbf.sss.NetworkConnectionRe"
  "sp\"\000\022a\n\026ListNetworkConnections\022!.bbf.sss"
  ".ListNetworkConnectionReq\032\".bbf.sss.List"
  "NetworkConnectionResp\"\000\022W\n\024UpdateService"
  "Gateway\022 .bbf.sss.UpdateServiceGatewayRe"
  "q\032\033.bbf.sss.ServiceGatewayResp\"\000\022W\n\024Dele"
  "teServiceGateway\022 .bbf.sss.DeleteService"
  "GatewayReq\032\033.bbf.sss.ServiceGatewayResp\""
  "\000\022Q\n\021GetServiceGateway\022\035.bbf.sss.GetServ"
  "iceGatewayReq\032\033.bbf.sss.ServiceGatewayRe"
  "sp\"\000\022X\n\023ListServiceGateways\022\036.bbf.sss.Li"
  "stServiceGatewayReq\032\037.bbf.sss.ListServic"
  "eGatewayResp\"\000\022W\n\024UpdateSessionContext\022 "
  ".bbf.sss.UpdateSessionContextReq\032\033.bbf.s"
  "ss.SessionContextResp\"\000\022W\n\024DeleteSession"
  "Context\022 .bbf.sss.DeleteSessionContextRe"
  "q\032\033.bbf.sss.SessionContextResp\"\000\022Q\n\021GetS"
  "essionContext\022\035.bbf.sss.GetSessionContex"
  "tReq\032\033.bbf.sss.SessionContextResp\"\000\022X\n\023L"
  "istSessionContexts\022\036.bbf.sss.ListSession"
  "ContextReq\032\037.bbf.sss.ListSessionContextR"
  "esp\"\000\0223\n\006Lookup\022\022.bbf.sss.LookupReq\032\023.bb"
  "f.sss.LookupResp\"\000B\016Z\014sssproto/sssb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sssupsf_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sssupsf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sssupsf_2eproto = {
  false, false, 8922, descriptor_table_protodef_sssupsf_2eproto, "sssupsf.proto", 
  &descriptor_table_sssupsf_2eproto_once, descriptor_table_sssupsf_2eproto_deps, 1, 61,
  schemas, file_default_instances, TableStruct_sssupsf_2eproto::offsets,
  file_level_metadata_sssupsf_2eproto, file_level_enum_descriptors_sssupsf_2eproto, file_level_service_descriptors_sssupsf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sssupsf_2eproto_getter() {
  return &descriptor_table_sssupsf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sssupsf_2eproto(&descriptor_table_sssupsf_2eproto);
namespace bbf {
namespace sss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscribeReq_SubscriptionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sssupsf_2eproto);
  return file_level_enum_descriptors_sssupsf_2eproto[0];
}
bool SubscribeReq_SubscriptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SubscribeReq_SubscriptionType SubscribeReq::shards;
constexpr SubscribeReq_SubscriptionType SubscribeReq::session_contexts;
constexpr SubscribeReq_SubscriptionType SubscribeReq::network_connections;
constexpr SubscribeReq_SubscriptionType SubscribeReq::service_gateway_user_planes;
constexpr SubscribeReq_SubscriptionType SubscribeReq::traffic_steering_functions;
constexpr SubscribeReq_SubscriptionType SubscribeReq::service_gateways;
constexpr SubscribeReq_SubscriptionType SubscribeReq::SubscriptionType_MIN;
constexpr SubscribeReq_SubscriptionType SubscribeReq::SubscriptionType_MAX;
constexpr int SubscribeReq::SubscriptionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkConnection_Status_NcEndpointStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sssupsf_2eproto);
  return file_level_enum_descriptors_sssupsf_2eproto[1];
}
bool NetworkConnection_Status_NcEndpointStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetworkConnection_Status_NcEndpointStatus NetworkConnection_Status::UNKNOWN;
constexpr NetworkConnection_Status_NcEndpointStatus NetworkConnection_Status::UP;
constexpr NetworkConnection_Status_NcEndpointStatus NetworkConnection_Status::DOWN;
constexpr NetworkConnection_Status_NcEndpointStatus NetworkConnection_Status::NcEndpointStatus_MIN;
constexpr NetworkConnection_Status_NcEndpointStatus NetworkConnection_Status::NcEndpointStatus_MAX;
constexpr int NetworkConnection_Status::NcEndpointStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionContext_Spec_ContextType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sssupsf_2eproto);
  return file_level_enum_descriptors_sssupsf_2eproto[2];
}
bool SessionContext_Spec_ContextType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SessionContext_Spec_ContextType SessionContext_Spec::DEFAULT;
constexpr SessionContext_Spec_ContextType SessionContext_Spec::PPPOE;
constexpr SessionContext_Spec_ContextType SessionContext_Spec::IPOE;
constexpr SessionContext_Spec_ContextType SessionContext_Spec::ContextType_MIN;
constexpr SessionContext_Spec_ContextType SessionContext_Spec::ContextType_MAX;
constexpr int SessionContext_Spec::ContextType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sssupsf_2eproto);
  return file_level_enum_descriptors_sssupsf_2eproto[3];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sssupsf_2eproto);
  return file_level_enum_descriptors_sssupsf_2eproto[4];
}
bool ItemStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MetaData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const MetaData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created(const MetaData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_requested(const MetaData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted(const MetaData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetaData::_Internal::last_updated(const MetaData* msg) {
  return *msg->last_updated_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetaData::_Internal::created(const MetaData* msg) {
  return *msg->created_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetaData::_Internal::delete_requested(const MetaData* msg) {
  return *msg->delete_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetaData::_Internal::deleted(const MetaData* msg) {
  return *msg->deleted_;
}
void MetaData::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
void MetaData::clear_created() {
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void MetaData::clear_delete_requested() {
  if (GetArenaForAllocation() == nullptr && delete_requested_ != nullptr) {
    delete delete_requested_;
  }
  delete_requested_ = nullptr;
}
void MetaData::clear_deleted() {
  if (GetArenaForAllocation() == nullptr && deleted_ != nullptr) {
    delete deleted_;
  }
  deleted_ = nullptr;
}
MetaData::MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_delete_requested()) {
    delete_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.delete_requested_);
  } else {
    delete_requested_ = nullptr;
  }
  if (from._internal_has_deleted()) {
    deleted_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_);
  } else {
    deleted_ = nullptr;
  }
  item_status_ = from.item_status_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.MetaData)
}

inline void MetaData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_updated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_status_) -
    reinterpret_cast<char*>(&last_updated_)) + sizeof(item_status_));
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:bbf.sss.MetaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_updated_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete delete_requested_;
  if (this != internal_default_instance()) delete deleted_;
}

void MetaData::ArenaDtor(void* object) {
  MetaData* _this = reinterpret_cast< MetaData* >(object);
  (void)_this;
}
void MetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.MetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaForAllocation() == nullptr && delete_requested_ != nullptr) {
    delete delete_requested_;
  }
  delete_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deleted_ != nullptr) {
    delete deleted_;
  }
  deleted_ = nullptr;
  item_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp last_updated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp delete_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ItemStatus item_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_status(static_cast<::bbf::sss::ItemStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.MetaData.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.MetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 1;
  if (this->_internal_has_last_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_updated(this), target, stream);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->_internal_has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created(this), target, stream);
  }

  // .google.protobuf.Timestamp delete_requested = 3;
  if (this->_internal_has_delete_requested()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::delete_requested(this), target, stream);
  }

  // .google.protobuf.Timestamp deleted = 4;
  if (this->_internal_has_deleted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::deleted(this), target, stream);
  }

  // .bbf.sss.ItemStatus item_status = 5;
  if (this->_internal_item_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_item_status(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.MetaData.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.MetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp last_updated = 1;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp delete_requested = 3;
  if (this->_internal_has_delete_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_requested_);
  }

  // .google.protobuf.Timestamp deleted = 4;
  if (this->_internal_has_deleted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_);
  }

  // .bbf.sss.ItemStatus item_status = 5;
  if (this->_internal_item_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaData::GetClassData() const { return &_class_data_; }

void MetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetaData *>(to)->MergeFrom(
      static_cast<const MetaData &>(from));
}


void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_last_updated()) {
    _internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (from._internal_has_created()) {
    _internal_mutable_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from._internal_has_delete_requested()) {
    _internal_mutable_delete_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_delete_requested());
  }
  if (from._internal_has_deleted()) {
    _internal_mutable_deleted()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted());
  }
  if (from._internal_item_status() != 0) {
    _internal_set_item_status(from._internal_item_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaData, item_status_)
      + sizeof(MetaData::item_status_)
      - PROTOBUF_FIELD_OFFSET(MetaData, last_updated_)>(
          reinterpret_cast<char*>(&last_updated_),
          reinterpret_cast<char*>(&other->last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[0]);
}

// ===================================================================

class ListFilter::_Internal {
 public:
};

ListFilter::ListFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListFilter)
}
ListFilter::ListFilter(const ListFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListFilter)
}

inline void ListFilter::SharedCtor() {
}

ListFilter::~ListFilter() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListFilter::ArenaDtor(void* object) {
  ListFilter* _this = reinterpret_cast< ListFilter* >(object);
  (void)_this;
}
void ListFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ListFilter.id_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id_list = 2;
  for (int i = 0, n = this->_internal_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ListFilter.id_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListFilter)
  return target;
}

size_t ListFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(id_list_.size());
  for (int i = 0, n = id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      id_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFilter::GetClassData() const { return &_class_data_; }

void ListFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListFilter *>(to)->MergeFrom(
      static_cast<const ListFilter &>(from));
}


void ListFilter::MergeFrom(const ListFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFilter::CopyFrom(const ListFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFilter::IsInitialized() const {
  return true;
}

void ListFilter::InternalSwap(ListFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[1]);
}

// ===================================================================

class SubscribeReq::_Internal {
 public:
};

SubscribeReq::SubscribeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subscription_(arena),
  id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SubscribeReq)
}
SubscribeReq::SubscribeReq(const SubscribeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscription_(from.subscription_),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SubscribeReq)
}

inline void SubscribeReq::SharedCtor() {
}

SubscribeReq::~SubscribeReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.SubscribeReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribeReq::ArenaDtor(void* object) {
  SubscribeReq* _this = reinterpret_cast< SubscribeReq* >(object);
  (void)_this;
}
void SubscribeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SubscribeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.Clear();
  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bbf.sss.SubscribeReq.SubscriptionType subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_subscription(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_subscription(static_cast<::bbf::sss::SubscribeReq_SubscriptionType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string id_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SubscribeReq.id_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SubscribeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bbf.sss.SubscribeReq.SubscriptionType subscription = 1;
  {
    int byte_size = _subscription_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, subscription_, byte_size, target);
    }
  }

  // repeated string id_list = 2;
  for (int i = 0, n = this->_internal_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SubscribeReq.id_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SubscribeReq)
  return target;
}

size_t SubscribeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SubscribeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.SubscribeReq.SubscriptionType subscription = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_subscription_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_subscription(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _subscription_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string id_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(id_list_.size());
  for (int i = 0, n = id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      id_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeReq::GetClassData() const { return &_class_data_; }

void SubscribeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeReq *>(to)->MergeFrom(
      static_cast<const SubscribeReq &>(from));
}


void SubscribeReq::MergeFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscription_.MergeFrom(from.subscription_);
  id_list_.MergeFrom(from.id_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeReq::CopyFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReq::IsInitialized() const {
  return true;
}

void SubscribeReq::InternalSwap(SubscribeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subscription_.InternalSwap(&other->subscription_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[2]);
}

// ===================================================================

class Update::_Internal {
 public:
  static const ::bbf::sss::Shard& shard(const Update* msg);
  static const ::bbf::sss::SessionContext& session_context(const Update* msg);
  static const ::bbf::sss::NetworkConnection& network_connection(const Update* msg);
  static const ::bbf::sss::ServiceGatewayUserPlane& service_gateway_user_plane(const Update* msg);
  static const ::bbf::sss::TrafficSteeringFunction& traffic_steering_function(const Update* msg);
  static const ::bbf::sss::ServiceGateway& service_gateway(const Update* msg);
};

const ::bbf::sss::Shard&
Update::_Internal::shard(const Update* msg) {
  return *msg->item_.shard_;
}
const ::bbf::sss::SessionContext&
Update::_Internal::session_context(const Update* msg) {
  return *msg->item_.session_context_;
}
const ::bbf::sss::NetworkConnection&
Update::_Internal::network_connection(const Update* msg) {
  return *msg->item_.network_connection_;
}
const ::bbf::sss::ServiceGatewayUserPlane&
Update::_Internal::service_gateway_user_plane(const Update* msg) {
  return *msg->item_.service_gateway_user_plane_;
}
const ::bbf::sss::TrafficSteeringFunction&
Update::_Internal::traffic_steering_function(const Update* msg) {
  return *msg->item_.traffic_steering_function_;
}
const ::bbf::sss::ServiceGateway&
Update::_Internal::service_gateway(const Update* msg) {
  return *msg->item_.service_gateway_;
}
void Update::set_allocated_shard(::bbf::sss::Shard* shard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (shard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::Shard>::GetOwningArena(shard);
    if (message_arena != submessage_arena) {
      shard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard, submessage_arena);
    }
    set_has_shard();
    item_.shard_ = shard;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.shard)
}
void Update::set_allocated_session_context(::bbf::sss::SessionContext* session_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (session_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::SessionContext>::GetOwningArena(session_context);
    if (message_arena != submessage_arena) {
      session_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_context, submessage_arena);
    }
    set_has_session_context();
    item_.session_context_ = session_context;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.session_context)
}
void Update::set_allocated_network_connection(::bbf::sss::NetworkConnection* network_connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (network_connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::NetworkConnection>::GetOwningArena(network_connection);
    if (message_arena != submessage_arena) {
      network_connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_connection, submessage_arena);
    }
    set_has_network_connection();
    item_.network_connection_ = network_connection;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.network_connection)
}
void Update::set_allocated_service_gateway_user_plane(::bbf::sss::ServiceGatewayUserPlane* service_gateway_user_plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (service_gateway_user_plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::ServiceGatewayUserPlane>::GetOwningArena(service_gateway_user_plane);
    if (message_arena != submessage_arena) {
      service_gateway_user_plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_gateway_user_plane, submessage_arena);
    }
    set_has_service_gateway_user_plane();
    item_.service_gateway_user_plane_ = service_gateway_user_plane;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.service_gateway_user_plane)
}
void Update::set_allocated_traffic_steering_function(::bbf::sss::TrafficSteeringFunction* traffic_steering_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (traffic_steering_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::TrafficSteeringFunction>::GetOwningArena(traffic_steering_function);
    if (message_arena != submessage_arena) {
      traffic_steering_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_steering_function, submessage_arena);
    }
    set_has_traffic_steering_function();
    item_.traffic_steering_function_ = traffic_steering_function;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.traffic_steering_function)
}
void Update::set_allocated_service_gateway(::bbf::sss::ServiceGateway* service_gateway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (service_gateway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::ServiceGateway>::GetOwningArena(service_gateway);
    if (message_arena != submessage_arena) {
      service_gateway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_gateway, submessage_arena);
    }
    set_has_service_gateway();
    item_.service_gateway_ = service_gateway;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.Update.service_gateway)
}
Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kShard: {
      _internal_mutable_shard()->::bbf::sss::Shard::MergeFrom(from._internal_shard());
      break;
    }
    case kSessionContext: {
      _internal_mutable_session_context()->::bbf::sss::SessionContext::MergeFrom(from._internal_session_context());
      break;
    }
    case kNetworkConnection: {
      _internal_mutable_network_connection()->::bbf::sss::NetworkConnection::MergeFrom(from._internal_network_connection());
      break;
    }
    case kServiceGatewayUserPlane: {
      _internal_mutable_service_gateway_user_plane()->::bbf::sss::ServiceGatewayUserPlane::MergeFrom(from._internal_service_gateway_user_plane());
      break;
    }
    case kTrafficSteeringFunction: {
      _internal_mutable_traffic_steering_function()->::bbf::sss::TrafficSteeringFunction::MergeFrom(from._internal_traffic_steering_function());
      break;
    }
    case kServiceGateway: {
      _internal_mutable_service_gateway()->::bbf::sss::ServiceGateway::MergeFrom(from._internal_service_gateway());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.Update)
}

inline void Update::SharedCtor() {
clear_has_item();
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:bbf.sss.Update)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void Update::ArenaDtor(void* object) {
  Update* _this = reinterpret_cast< Update* >(object);
  (void)_this;
}
void Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Update::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:bbf.sss.Update)
  switch (item_case()) {
    case kShard: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.shard_;
      }
      break;
    }
    case kSessionContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.session_context_;
      }
      break;
    }
    case kNetworkConnection: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.network_connection_;
      }
      break;
    }
    case kServiceGatewayUserPlane: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.service_gateway_user_plane_;
      }
      break;
    }
    case kTrafficSteeringFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.traffic_steering_function_;
      }
      break;
    }
    case kServiceGateway: {
      if (GetArenaForAllocation() == nullptr) {
        delete item_.service_gateway_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.Update)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Shard shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext session_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.NetworkConnection network_connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway_user_plane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_steering_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGateway service_gateway = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Update::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.Update)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Shard shard = 1;
  if (_internal_has_shard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shard(this), target, stream);
  }

  // .bbf.sss.SessionContext session_context = 2;
  if (_internal_has_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session_context(this), target, stream);
  }

  // .bbf.sss.NetworkConnection network_connection = 3;
  if (_internal_has_network_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::network_connection(this), target, stream);
  }

  // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 4;
  if (_internal_has_service_gateway_user_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::service_gateway_user_plane(this), target, stream);
  }

  // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 5;
  if (_internal_has_traffic_steering_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::traffic_steering_function(this), target, stream);
  }

  // .bbf.sss.ServiceGateway service_gateway = 6;
  if (_internal_has_service_gateway()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::service_gateway(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.Update)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .bbf.sss.Shard shard = 1;
    case kShard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.shard_);
      break;
    }
    // .bbf.sss.SessionContext session_context = 2;
    case kSessionContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.session_context_);
      break;
    }
    // .bbf.sss.NetworkConnection network_connection = 3;
    case kNetworkConnection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.network_connection_);
      break;
    }
    // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 4;
    case kServiceGatewayUserPlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.service_gateway_user_plane_);
      break;
    }
    // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 5;
    case kTrafficSteeringFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.traffic_steering_function_);
      break;
    }
    // .bbf.sss.ServiceGateway service_gateway = 6;
    case kServiceGateway: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.service_gateway_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Update::GetClassData() const { return &_class_data_; }

void Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Update *>(to)->MergeFrom(
      static_cast<const Update &>(from));
}


void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.Update)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kShard: {
      _internal_mutable_shard()->::bbf::sss::Shard::MergeFrom(from._internal_shard());
      break;
    }
    case kSessionContext: {
      _internal_mutable_session_context()->::bbf::sss::SessionContext::MergeFrom(from._internal_session_context());
      break;
    }
    case kNetworkConnection: {
      _internal_mutable_network_connection()->::bbf::sss::NetworkConnection::MergeFrom(from._internal_network_connection());
      break;
    }
    case kServiceGatewayUserPlane: {
      _internal_mutable_service_gateway_user_plane()->::bbf::sss::ServiceGatewayUserPlane::MergeFrom(from._internal_service_gateway_user_plane());
      break;
    }
    case kTrafficSteeringFunction: {
      _internal_mutable_traffic_steering_function()->::bbf::sss::TrafficSteeringFunction::MergeFrom(from._internal_traffic_steering_function());
      break;
    }
    case kServiceGateway: {
      _internal_mutable_service_gateway()->::bbf::sss::ServiceGateway::MergeFrom(from._internal_service_gateway());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[3]);
}

// ===================================================================

class LookupReq::_Internal {
 public:
  static const ::bbf::sss::SessionContext_Spec& spec(const LookupReq* msg);
};

const ::bbf::sss::SessionContext_Spec&
LookupReq::_Internal::spec(const LookupReq* msg) {
  return *msg->spec_;
}
LookupReq::LookupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.LookupReq)
}
LookupReq::LookupReq(const LookupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::SessionContext_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.LookupReq)
}

inline void LookupReq::SharedCtor() {
spec_ = nullptr;
}

LookupReq::~LookupReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.LookupReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LookupReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
}

void LookupReq::ArenaDtor(void* object) {
  LookupReq* _this = reinterpret_cast< LookupReq* >(object);
  (void)_this;
}
void LookupReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.LookupReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.SessionContext.Spec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.LookupReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.SessionContext.Spec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.LookupReq)
  return target;
}

size_t LookupReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.LookupReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.SessionContext.Spec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LookupReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupReq::GetClassData() const { return &_class_data_; }

void LookupReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LookupReq *>(to)->MergeFrom(
      static_cast<const LookupReq &>(from));
}


void LookupReq::MergeFrom(const LookupReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.LookupReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::SessionContext_Spec::MergeFrom(from._internal_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupReq::CopyFrom(const LookupReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.LookupReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupReq::IsInitialized() const {
  return true;
}

void LookupReq::InternalSwap(LookupReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(spec_, other->spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[4]);
}

// ===================================================================

class LookupResp::_Internal {
 public:
  static const ::bbf::sss::SessionContext& session_context(const LookupResp* msg);
};

const ::bbf::sss::SessionContext&
LookupResp::_Internal::session_context(const LookupResp* msg) {
  return *msg->session_context_;
}
LookupResp::LookupResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.LookupResp)
}
LookupResp::LookupResp(const LookupResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session_context()) {
    session_context_ = new ::bbf::sss::SessionContext(*from.session_context_);
  } else {
    session_context_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.LookupResp)
}

inline void LookupResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&session_context_)) + sizeof(result_));
}

LookupResp::~LookupResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.LookupResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LookupResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete session_context_;
}

void LookupResp::ArenaDtor(void* object) {
  LookupResp* _this = reinterpret_cast< LookupResp* >(object);
  (void)_this;
}
void LookupResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.LookupResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && session_context_ != nullptr) {
    delete session_context_;
  }
  session_context_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext session_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.LookupResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.SessionContext session_context = 2;
  if (this->_internal_has_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.LookupResp)
  return target;
}

size_t LookupResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.LookupResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.SessionContext session_context = 2;
  if (this->_internal_has_session_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_context_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LookupResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LookupResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LookupResp::GetClassData() const { return &_class_data_; }

void LookupResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LookupResp *>(to)->MergeFrom(
      static_cast<const LookupResp &>(from));
}


void LookupResp::MergeFrom(const LookupResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.LookupResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_context()) {
    _internal_mutable_session_context()->::bbf::sss::SessionContext::MergeFrom(from._internal_session_context());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LookupResp::CopyFrom(const LookupResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.LookupResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResp::IsInitialized() const {
  return true;
}

void LookupResp::InternalSwap(LookupResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResp, result_)
      + sizeof(LookupResp::result_)
      - PROTOBUF_FIELD_OFFSET(LookupResp, session_context_)>(
          reinterpret_cast<char*>(&session_context_),
          reinterpret_cast<char*>(&other->session_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[5]);
}

// ===================================================================

class UpdateServiceGatewayReq::_Internal {
 public:
  static const ::bbf::sss::ServiceGateway& service_gateway(const UpdateServiceGatewayReq* msg);
};

const ::bbf::sss::ServiceGateway&
UpdateServiceGatewayReq::_Internal::service_gateway(const UpdateServiceGatewayReq* msg) {
  return *msg->service_gateway_;
}
UpdateServiceGatewayReq::UpdateServiceGatewayReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateServiceGatewayReq)
}
UpdateServiceGatewayReq::UpdateServiceGatewayReq(const UpdateServiceGatewayReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_gateway()) {
    service_gateway_ = new ::bbf::sss::ServiceGateway(*from.service_gateway_);
  } else {
    service_gateway_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateServiceGatewayReq)
}

inline void UpdateServiceGatewayReq::SharedCtor() {
service_gateway_ = nullptr;
}

UpdateServiceGatewayReq::~UpdateServiceGatewayReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateServiceGatewayReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateServiceGatewayReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_gateway_;
}

void UpdateServiceGatewayReq::ArenaDtor(void* object) {
  UpdateServiceGatewayReq* _this = reinterpret_cast< UpdateServiceGatewayReq* >(object);
  (void)_this;
}
void UpdateServiceGatewayReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServiceGatewayReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateServiceGatewayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_gateway_ != nullptr) {
    delete service_gateway_;
  }
  service_gateway_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServiceGatewayReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ServiceGateway service_gateway = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateServiceGatewayReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ServiceGateway service_gateway = 1;
  if (this->_internal_has_service_gateway()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::service_gateway(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateServiceGatewayReq)
  return target;
}

size_t UpdateServiceGatewayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateServiceGatewayReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ServiceGateway service_gateway = 1;
  if (this->_internal_has_service_gateway()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_gateway_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateServiceGatewayReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateServiceGatewayReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateServiceGatewayReq::GetClassData() const { return &_class_data_; }

void UpdateServiceGatewayReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateServiceGatewayReq *>(to)->MergeFrom(
      static_cast<const UpdateServiceGatewayReq &>(from));
}


void UpdateServiceGatewayReq::MergeFrom(const UpdateServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateServiceGatewayReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_gateway()) {
    _internal_mutable_service_gateway()->::bbf::sss::ServiceGateway::MergeFrom(from._internal_service_gateway());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateServiceGatewayReq::CopyFrom(const UpdateServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateServiceGatewayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServiceGatewayReq::IsInitialized() const {
  return true;
}

void UpdateServiceGatewayReq::InternalSwap(UpdateServiceGatewayReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(service_gateway_, other->service_gateway_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServiceGatewayReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[6]);
}

// ===================================================================

class DeleteServiceGatewayReq::_Internal {
 public:
};

DeleteServiceGatewayReq::DeleteServiceGatewayReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteServiceGatewayReq)
}
DeleteServiceGatewayReq::DeleteServiceGatewayReq(const DeleteServiceGatewayReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteServiceGatewayReq)
}

inline void DeleteServiceGatewayReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteServiceGatewayReq::~DeleteServiceGatewayReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteServiceGatewayReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteServiceGatewayReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteServiceGatewayReq::ArenaDtor(void* object) {
  DeleteServiceGatewayReq* _this = reinterpret_cast< DeleteServiceGatewayReq* >(object);
  (void)_this;
}
void DeleteServiceGatewayReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteServiceGatewayReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteServiceGatewayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteServiceGatewayReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteServiceGatewayReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteServiceGatewayReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteServiceGatewayReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteServiceGatewayReq)
  return target;
}

size_t DeleteServiceGatewayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteServiceGatewayReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteServiceGatewayReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteServiceGatewayReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteServiceGatewayReq::GetClassData() const { return &_class_data_; }

void DeleteServiceGatewayReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteServiceGatewayReq *>(to)->MergeFrom(
      static_cast<const DeleteServiceGatewayReq &>(from));
}


void DeleteServiceGatewayReq::MergeFrom(const DeleteServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteServiceGatewayReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteServiceGatewayReq::CopyFrom(const DeleteServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteServiceGatewayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceGatewayReq::IsInitialized() const {
  return true;
}

void DeleteServiceGatewayReq::InternalSwap(DeleteServiceGatewayReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServiceGatewayReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[7]);
}

// ===================================================================

class GetServiceGatewayReq::_Internal {
 public:
};

GetServiceGatewayReq::GetServiceGatewayReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetServiceGatewayReq)
}
GetServiceGatewayReq::GetServiceGatewayReq(const GetServiceGatewayReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetServiceGatewayReq)
}

inline void GetServiceGatewayReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceGatewayReq::~GetServiceGatewayReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetServiceGatewayReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServiceGatewayReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceGatewayReq::ArenaDtor(void* object) {
  GetServiceGatewayReq* _this = reinterpret_cast< GetServiceGatewayReq* >(object);
  (void)_this;
}
void GetServiceGatewayReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceGatewayReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceGatewayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceGatewayReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetServiceGatewayReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceGatewayReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetServiceGatewayReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetServiceGatewayReq)
  return target;
}

size_t GetServiceGatewayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetServiceGatewayReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceGatewayReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceGatewayReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceGatewayReq::GetClassData() const { return &_class_data_; }

void GetServiceGatewayReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceGatewayReq *>(to)->MergeFrom(
      static_cast<const GetServiceGatewayReq &>(from));
}


void GetServiceGatewayReq::MergeFrom(const GetServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetServiceGatewayReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceGatewayReq::CopyFrom(const GetServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetServiceGatewayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceGatewayReq::IsInitialized() const {
  return true;
}

void GetServiceGatewayReq::InternalSwap(GetServiceGatewayReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceGatewayReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[8]);
}

// ===================================================================

class ServiceGatewayResp::_Internal {
 public:
  static const ::bbf::sss::ServiceGateway& service_gateway(const ServiceGatewayResp* msg);
};

const ::bbf::sss::ServiceGateway&
ServiceGatewayResp::_Internal::service_gateway(const ServiceGatewayResp* msg) {
  return *msg->service_gateway_;
}
ServiceGatewayResp::ServiceGatewayResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGatewayResp)
}
ServiceGatewayResp::ServiceGatewayResp(const ServiceGatewayResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_gateway()) {
    service_gateway_ = new ::bbf::sss::ServiceGateway(*from.service_gateway_);
  } else {
    service_gateway_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGatewayResp)
}

inline void ServiceGatewayResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_gateway_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&service_gateway_)) + sizeof(result_));
}

ServiceGatewayResp::~ServiceGatewayResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGatewayResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGatewayResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_gateway_;
}

void ServiceGatewayResp::ArenaDtor(void* object) {
  ServiceGatewayResp* _this = reinterpret_cast< ServiceGatewayResp* >(object);
  (void)_this;
}
void ServiceGatewayResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGatewayResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGatewayResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGatewayResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_gateway_ != nullptr) {
    delete service_gateway_;
  }
  service_gateway_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGatewayResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGateway service_gateway = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGatewayResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGatewayResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.ServiceGateway service_gateway = 2;
  if (this->_internal_has_service_gateway()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_gateway(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGatewayResp)
  return target;
}

size_t ServiceGatewayResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGatewayResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ServiceGateway service_gateway = 2;
  if (this->_internal_has_service_gateway()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_gateway_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGatewayResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGatewayResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGatewayResp::GetClassData() const { return &_class_data_; }

void ServiceGatewayResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGatewayResp *>(to)->MergeFrom(
      static_cast<const ServiceGatewayResp &>(from));
}


void ServiceGatewayResp::MergeFrom(const ServiceGatewayResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGatewayResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_gateway()) {
    _internal_mutable_service_gateway()->::bbf::sss::ServiceGateway::MergeFrom(from._internal_service_gateway());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGatewayResp::CopyFrom(const ServiceGatewayResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGatewayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGatewayResp::IsInitialized() const {
  return true;
}

void ServiceGatewayResp::InternalSwap(ServiceGatewayResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceGatewayResp, result_)
      + sizeof(ServiceGatewayResp::result_)
      - PROTOBUF_FIELD_OFFSET(ServiceGatewayResp, service_gateway_)>(
          reinterpret_cast<char*>(&service_gateway_),
          reinterpret_cast<char*>(&other->service_gateway_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGatewayResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[9]);
}

// ===================================================================

class ListServiceGatewayReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListServiceGatewayReq* msg);
};

const ::bbf::sss::ListFilter&
ListServiceGatewayReq::_Internal::filter(const ListServiceGatewayReq* msg) {
  return *msg->filter_;
}
ListServiceGatewayReq::ListServiceGatewayReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListServiceGatewayReq)
}
ListServiceGatewayReq::ListServiceGatewayReq(const ListServiceGatewayReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListServiceGatewayReq)
}

inline void ListServiceGatewayReq::SharedCtor() {
filter_ = nullptr;
}

ListServiceGatewayReq::~ListServiceGatewayReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListServiceGatewayReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListServiceGatewayReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListServiceGatewayReq::ArenaDtor(void* object) {
  ListServiceGatewayReq* _this = reinterpret_cast< ListServiceGatewayReq* >(object);
  (void)_this;
}
void ListServiceGatewayReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListServiceGatewayReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListServiceGatewayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServiceGatewayReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServiceGatewayReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListServiceGatewayReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListServiceGatewayReq)
  return target;
}

size_t ListServiceGatewayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListServiceGatewayReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServiceGatewayReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListServiceGatewayReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServiceGatewayReq::GetClassData() const { return &_class_data_; }

void ListServiceGatewayReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListServiceGatewayReq *>(to)->MergeFrom(
      static_cast<const ListServiceGatewayReq &>(from));
}


void ListServiceGatewayReq::MergeFrom(const ListServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListServiceGatewayReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServiceGatewayReq::CopyFrom(const ListServiceGatewayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListServiceGatewayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceGatewayReq::IsInitialized() const {
  return true;
}

void ListServiceGatewayReq::InternalSwap(ListServiceGatewayReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServiceGatewayReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[10]);
}

// ===================================================================

class ListServiceGatewayResp::_Internal {
 public:
};

ListServiceGatewayResp::ListServiceGatewayResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_gateway_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListServiceGatewayResp)
}
ListServiceGatewayResp::ListServiceGatewayResp(const ListServiceGatewayResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_gateway_(from.service_gateway_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListServiceGatewayResp)
}

inline void ListServiceGatewayResp::SharedCtor() {
result_ = 0;
}

ListServiceGatewayResp::~ListServiceGatewayResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListServiceGatewayResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListServiceGatewayResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListServiceGatewayResp::ArenaDtor(void* object) {
  ListServiceGatewayResp* _this = reinterpret_cast< ListServiceGatewayResp* >(object);
  (void)_this;
}
void ListServiceGatewayResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListServiceGatewayResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListServiceGatewayResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListServiceGatewayResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_gateway_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServiceGatewayResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bbf.sss.ServiceGateway service_gateway = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_gateway(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServiceGatewayResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListServiceGatewayResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .bbf.sss.ServiceGateway service_gateway = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_gateway_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_service_gateway(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListServiceGatewayResp)
  return target;
}

size_t ListServiceGatewayResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListServiceGatewayResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.ServiceGateway service_gateway = 2;
  total_size += 1UL * this->_internal_service_gateway_size();
  for (const auto& msg : this->service_gateway_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServiceGatewayResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListServiceGatewayResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServiceGatewayResp::GetClassData() const { return &_class_data_; }

void ListServiceGatewayResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListServiceGatewayResp *>(to)->MergeFrom(
      static_cast<const ListServiceGatewayResp &>(from));
}


void ListServiceGatewayResp::MergeFrom(const ListServiceGatewayResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListServiceGatewayResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_gateway_.MergeFrom(from.service_gateway_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServiceGatewayResp::CopyFrom(const ListServiceGatewayResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListServiceGatewayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceGatewayResp::IsInitialized() const {
  return true;
}

void ListServiceGatewayResp::InternalSwap(ListServiceGatewayResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_gateway_.InternalSwap(&other->service_gateway_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServiceGatewayResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[11]);
}

// ===================================================================

class UpdateShardReq::_Internal {
 public:
  static const ::bbf::sss::Shard& shard(const UpdateShardReq* msg);
};

const ::bbf::sss::Shard&
UpdateShardReq::_Internal::shard(const UpdateShardReq* msg) {
  return *msg->shard_;
}
UpdateShardReq::UpdateShardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateShardReq)
}
UpdateShardReq::UpdateShardReq(const UpdateShardReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shard()) {
    shard_ = new ::bbf::sss::Shard(*from.shard_);
  } else {
    shard_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateShardReq)
}

inline void UpdateShardReq::SharedCtor() {
shard_ = nullptr;
}

UpdateShardReq::~UpdateShardReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateShardReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateShardReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shard_;
}

void UpdateShardReq::ArenaDtor(void* object) {
  UpdateShardReq* _this = reinterpret_cast< UpdateShardReq* >(object);
  (void)_this;
}
void UpdateShardReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateShardReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateShardReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Shard shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateShardReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateShardReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Shard shard = 1;
  if (this->_internal_has_shard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shard(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateShardReq)
  return target;
}

size_t UpdateShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateShardReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.Shard shard = 1;
  if (this->_internal_has_shard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shard_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateShardReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateShardReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateShardReq::GetClassData() const { return &_class_data_; }

void UpdateShardReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateShardReq *>(to)->MergeFrom(
      static_cast<const UpdateShardReq &>(from));
}


void UpdateShardReq::MergeFrom(const UpdateShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shard()) {
    _internal_mutable_shard()->::bbf::sss::Shard::MergeFrom(from._internal_shard());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateShardReq::CopyFrom(const UpdateShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateShardReq::IsInitialized() const {
  return true;
}

void UpdateShardReq::InternalSwap(UpdateShardReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(shard_, other->shard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateShardReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[12]);
}

// ===================================================================

class DeleteShardReq::_Internal {
 public:
};

DeleteShardReq::DeleteShardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteShardReq)
}
DeleteShardReq::DeleteShardReq(const DeleteShardReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteShardReq)
}

inline void DeleteShardReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteShardReq::~DeleteShardReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteShardReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteShardReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteShardReq::ArenaDtor(void* object) {
  DeleteShardReq* _this = reinterpret_cast< DeleteShardReq* >(object);
  (void)_this;
}
void DeleteShardReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteShardReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteShardReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteShardReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteShardReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteShardReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteShardReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteShardReq)
  return target;
}

size_t DeleteShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteShardReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteShardReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteShardReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteShardReq::GetClassData() const { return &_class_data_; }

void DeleteShardReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteShardReq *>(to)->MergeFrom(
      static_cast<const DeleteShardReq &>(from));
}


void DeleteShardReq::MergeFrom(const DeleteShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteShardReq::CopyFrom(const DeleteShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteShardReq::IsInitialized() const {
  return true;
}

void DeleteShardReq::InternalSwap(DeleteShardReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteShardReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[13]);
}

// ===================================================================

class GetShardReq::_Internal {
 public:
};

GetShardReq::GetShardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetShardReq)
}
GetShardReq::GetShardReq(const GetShardReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetShardReq)
}

inline void GetShardReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetShardReq::~GetShardReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetShardReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetShardReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetShardReq::ArenaDtor(void* object) {
  GetShardReq* _this = reinterpret_cast< GetShardReq* >(object);
  (void)_this;
}
void GetShardReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetShardReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetShardReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetShardReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetShardReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetShardReq)
  return target;
}

size_t GetShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetShardReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetShardReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardReq::GetClassData() const { return &_class_data_; }

void GetShardReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetShardReq *>(to)->MergeFrom(
      static_cast<const GetShardReq &>(from));
}


void GetShardReq::MergeFrom(const GetShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardReq::CopyFrom(const GetShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardReq::IsInitialized() const {
  return true;
}

void GetShardReq::InternalSwap(GetShardReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[14]);
}

// ===================================================================

class ShardResp::_Internal {
 public:
  static const ::bbf::sss::Shard& shard(const ShardResp* msg);
};

const ::bbf::sss::Shard&
ShardResp::_Internal::shard(const ShardResp* msg) {
  return *msg->shard_;
}
ShardResp::ShardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ShardResp)
}
ShardResp::ShardResp(const ShardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shard()) {
    shard_ = new ::bbf::sss::Shard(*from.shard_);
  } else {
    shard_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ShardResp)
}

inline void ShardResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shard_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&shard_)) + sizeof(result_));
}

ShardResp::~ShardResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ShardResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shard_;
}

void ShardResp::ArenaDtor(void* object) {
  ShardResp* _this = reinterpret_cast< ShardResp* >(object);
  (void)_this;
}
void ShardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ShardResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.Shard shard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ShardResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.Shard shard = 2;
  if (this->_internal_has_shard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shard(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ShardResp)
  return target;
}

size_t ShardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ShardResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.Shard shard = 2;
  if (this->_internal_has_shard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shard_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardResp::GetClassData() const { return &_class_data_; }

void ShardResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardResp *>(to)->MergeFrom(
      static_cast<const ShardResp &>(from));
}


void ShardResp::MergeFrom(const ShardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ShardResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shard()) {
    _internal_mutable_shard()->::bbf::sss::Shard::MergeFrom(from._internal_shard());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardResp::CopyFrom(const ShardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ShardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardResp::IsInitialized() const {
  return true;
}

void ShardResp::InternalSwap(ShardResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardResp, result_)
      + sizeof(ShardResp::result_)
      - PROTOBUF_FIELD_OFFSET(ShardResp, shard_)>(
          reinterpret_cast<char*>(&shard_),
          reinterpret_cast<char*>(&other->shard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[15]);
}

// ===================================================================

class ListShardReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListShardReq* msg);
};

const ::bbf::sss::ListFilter&
ListShardReq::_Internal::filter(const ListShardReq* msg) {
  return *msg->filter_;
}
ListShardReq::ListShardReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListShardReq)
}
ListShardReq::ListShardReq(const ListShardReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListShardReq)
}

inline void ListShardReq::SharedCtor() {
filter_ = nullptr;
}

ListShardReq::~ListShardReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListShardReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListShardReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListShardReq::ArenaDtor(void* object) {
  ListShardReq* _this = reinterpret_cast< ListShardReq* >(object);
  (void)_this;
}
void ListShardReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListShardReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListShardReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListShardReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListShardReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListShardReq)
  return target;
}

size_t ListShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListShardReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListShardReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListShardReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListShardReq::GetClassData() const { return &_class_data_; }

void ListShardReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListShardReq *>(to)->MergeFrom(
      static_cast<const ListShardReq &>(from));
}


void ListShardReq::MergeFrom(const ListShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListShardReq::CopyFrom(const ListShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListShardReq::IsInitialized() const {
  return true;
}

void ListShardReq::InternalSwap(ListShardReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListShardReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[16]);
}

// ===================================================================

class ListShardResp::_Internal {
 public:
};

ListShardResp::ListShardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shard_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListShardResp)
}
ListShardResp::ListShardResp(const ListShardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shard_(from.shard_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListShardResp)
}

inline void ListShardResp::SharedCtor() {
result_ = 0;
}

ListShardResp::~ListShardResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListShardResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListShardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListShardResp::ArenaDtor(void* object) {
  ListShardResp* _this = reinterpret_cast< ListShardResp* >(object);
  (void)_this;
}
void ListShardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListShardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListShardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListShardResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListShardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bbf.sss.Shard shard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shard(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListShardResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListShardResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .bbf.sss.Shard shard = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shard_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shard(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListShardResp)
  return target;
}

size_t ListShardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListShardResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.Shard shard = 2;
  total_size += 1UL * this->_internal_shard_size();
  for (const auto& msg : this->shard_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListShardResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListShardResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListShardResp::GetClassData() const { return &_class_data_; }

void ListShardResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListShardResp *>(to)->MergeFrom(
      static_cast<const ListShardResp &>(from));
}


void ListShardResp::MergeFrom(const ListShardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListShardResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shard_.MergeFrom(from.shard_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListShardResp::CopyFrom(const ListShardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListShardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListShardResp::IsInitialized() const {
  return true;
}

void ListShardResp::InternalSwap(ListShardResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shard_.InternalSwap(&other->shard_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListShardResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[17]);
}

// ===================================================================

class UpdateTrafficSteeringFunctionReq::_Internal {
 public:
  static const ::bbf::sss::TrafficSteeringFunction& traffic_steering_function(const UpdateTrafficSteeringFunctionReq* msg);
};

const ::bbf::sss::TrafficSteeringFunction&
UpdateTrafficSteeringFunctionReq::_Internal::traffic_steering_function(const UpdateTrafficSteeringFunctionReq* msg) {
  return *msg->traffic_steering_function_;
}
UpdateTrafficSteeringFunctionReq::UpdateTrafficSteeringFunctionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateTrafficSteeringFunctionReq)
}
UpdateTrafficSteeringFunctionReq::UpdateTrafficSteeringFunctionReq(const UpdateTrafficSteeringFunctionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_steering_function()) {
    traffic_steering_function_ = new ::bbf::sss::TrafficSteeringFunction(*from.traffic_steering_function_);
  } else {
    traffic_steering_function_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateTrafficSteeringFunctionReq)
}

inline void UpdateTrafficSteeringFunctionReq::SharedCtor() {
traffic_steering_function_ = nullptr;
}

UpdateTrafficSteeringFunctionReq::~UpdateTrafficSteeringFunctionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateTrafficSteeringFunctionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateTrafficSteeringFunctionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete traffic_steering_function_;
}

void UpdateTrafficSteeringFunctionReq::ArenaDtor(void* object) {
  UpdateTrafficSteeringFunctionReq* _this = reinterpret_cast< UpdateTrafficSteeringFunctionReq* >(object);
  (void)_this;
}
void UpdateTrafficSteeringFunctionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTrafficSteeringFunctionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateTrafficSteeringFunctionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && traffic_steering_function_ != nullptr) {
    delete traffic_steering_function_;
  }
  traffic_steering_function_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTrafficSteeringFunctionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_steering_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateTrafficSteeringFunctionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 1;
  if (this->_internal_has_traffic_steering_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::traffic_steering_function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateTrafficSteeringFunctionReq)
  return target;
}

size_t UpdateTrafficSteeringFunctionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateTrafficSteeringFunctionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 1;
  if (this->_internal_has_traffic_steering_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_steering_function_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateTrafficSteeringFunctionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateTrafficSteeringFunctionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateTrafficSteeringFunctionReq::GetClassData() const { return &_class_data_; }

void UpdateTrafficSteeringFunctionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateTrafficSteeringFunctionReq *>(to)->MergeFrom(
      static_cast<const UpdateTrafficSteeringFunctionReq &>(from));
}


void UpdateTrafficSteeringFunctionReq::MergeFrom(const UpdateTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateTrafficSteeringFunctionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_traffic_steering_function()) {
    _internal_mutable_traffic_steering_function()->::bbf::sss::TrafficSteeringFunction::MergeFrom(from._internal_traffic_steering_function());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTrafficSteeringFunctionReq::CopyFrom(const UpdateTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateTrafficSteeringFunctionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTrafficSteeringFunctionReq::IsInitialized() const {
  return true;
}

void UpdateTrafficSteeringFunctionReq::InternalSwap(UpdateTrafficSteeringFunctionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(traffic_steering_function_, other->traffic_steering_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTrafficSteeringFunctionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[18]);
}

// ===================================================================

class DeleteTrafficSteeringFunctionReq::_Internal {
 public:
};

DeleteTrafficSteeringFunctionReq::DeleteTrafficSteeringFunctionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteTrafficSteeringFunctionReq)
}
DeleteTrafficSteeringFunctionReq::DeleteTrafficSteeringFunctionReq(const DeleteTrafficSteeringFunctionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteTrafficSteeringFunctionReq)
}

inline void DeleteTrafficSteeringFunctionReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteTrafficSteeringFunctionReq::~DeleteTrafficSteeringFunctionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteTrafficSteeringFunctionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTrafficSteeringFunctionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTrafficSteeringFunctionReq::ArenaDtor(void* object) {
  DeleteTrafficSteeringFunctionReq* _this = reinterpret_cast< DeleteTrafficSteeringFunctionReq* >(object);
  (void)_this;
}
void DeleteTrafficSteeringFunctionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTrafficSteeringFunctionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTrafficSteeringFunctionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTrafficSteeringFunctionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteTrafficSteeringFunctionReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTrafficSteeringFunctionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteTrafficSteeringFunctionReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteTrafficSteeringFunctionReq)
  return target;
}

size_t DeleteTrafficSteeringFunctionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteTrafficSteeringFunctionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTrafficSteeringFunctionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTrafficSteeringFunctionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTrafficSteeringFunctionReq::GetClassData() const { return &_class_data_; }

void DeleteTrafficSteeringFunctionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTrafficSteeringFunctionReq *>(to)->MergeFrom(
      static_cast<const DeleteTrafficSteeringFunctionReq &>(from));
}


void DeleteTrafficSteeringFunctionReq::MergeFrom(const DeleteTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteTrafficSteeringFunctionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTrafficSteeringFunctionReq::CopyFrom(const DeleteTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteTrafficSteeringFunctionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTrafficSteeringFunctionReq::IsInitialized() const {
  return true;
}

void DeleteTrafficSteeringFunctionReq::InternalSwap(DeleteTrafficSteeringFunctionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTrafficSteeringFunctionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[19]);
}

// ===================================================================

class GetTrafficSteeringFunctionReq::_Internal {
 public:
};

GetTrafficSteeringFunctionReq::GetTrafficSteeringFunctionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetTrafficSteeringFunctionReq)
}
GetTrafficSteeringFunctionReq::GetTrafficSteeringFunctionReq(const GetTrafficSteeringFunctionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetTrafficSteeringFunctionReq)
}

inline void GetTrafficSteeringFunctionReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTrafficSteeringFunctionReq::~GetTrafficSteeringFunctionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetTrafficSteeringFunctionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTrafficSteeringFunctionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTrafficSteeringFunctionReq::ArenaDtor(void* object) {
  GetTrafficSteeringFunctionReq* _this = reinterpret_cast< GetTrafficSteeringFunctionReq* >(object);
  (void)_this;
}
void GetTrafficSteeringFunctionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTrafficSteeringFunctionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTrafficSteeringFunctionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficSteeringFunctionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetTrafficSteeringFunctionReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTrafficSteeringFunctionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetTrafficSteeringFunctionReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetTrafficSteeringFunctionReq)
  return target;
}

size_t GetTrafficSteeringFunctionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetTrafficSteeringFunctionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrafficSteeringFunctionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTrafficSteeringFunctionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrafficSteeringFunctionReq::GetClassData() const { return &_class_data_; }

void GetTrafficSteeringFunctionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTrafficSteeringFunctionReq *>(to)->MergeFrom(
      static_cast<const GetTrafficSteeringFunctionReq &>(from));
}


void GetTrafficSteeringFunctionReq::MergeFrom(const GetTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetTrafficSteeringFunctionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrafficSteeringFunctionReq::CopyFrom(const GetTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetTrafficSteeringFunctionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficSteeringFunctionReq::IsInitialized() const {
  return true;
}

void GetTrafficSteeringFunctionReq::InternalSwap(GetTrafficSteeringFunctionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficSteeringFunctionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[20]);
}

// ===================================================================

class TrafficSteeringFunctionResp::_Internal {
 public:
  static const ::bbf::sss::TrafficSteeringFunction& traffic_steering_function(const TrafficSteeringFunctionResp* msg);
};

const ::bbf::sss::TrafficSteeringFunction&
TrafficSteeringFunctionResp::_Internal::traffic_steering_function(const TrafficSteeringFunctionResp* msg) {
  return *msg->traffic_steering_function_;
}
TrafficSteeringFunctionResp::TrafficSteeringFunctionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.TrafficSteeringFunctionResp)
}
TrafficSteeringFunctionResp::TrafficSteeringFunctionResp(const TrafficSteeringFunctionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_steering_function()) {
    traffic_steering_function_ = new ::bbf::sss::TrafficSteeringFunction(*from.traffic_steering_function_);
  } else {
    traffic_steering_function_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.TrafficSteeringFunctionResp)
}

inline void TrafficSteeringFunctionResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traffic_steering_function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&traffic_steering_function_)) + sizeof(result_));
}

TrafficSteeringFunctionResp::~TrafficSteeringFunctionResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.TrafficSteeringFunctionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSteeringFunctionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete traffic_steering_function_;
}

void TrafficSteeringFunctionResp::ArenaDtor(void* object) {
  TrafficSteeringFunctionResp* _this = reinterpret_cast< TrafficSteeringFunctionResp* >(object);
  (void)_this;
}
void TrafficSteeringFunctionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSteeringFunctionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSteeringFunctionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.TrafficSteeringFunctionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && traffic_steering_function_ != nullptr) {
    delete traffic_steering_function_;
  }
  traffic_steering_function_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSteeringFunctionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_steering_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSteeringFunctionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.TrafficSteeringFunctionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
  if (this->_internal_has_traffic_steering_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::traffic_steering_function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.TrafficSteeringFunctionResp)
  return target;
}

size_t TrafficSteeringFunctionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.TrafficSteeringFunctionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
  if (this->_internal_has_traffic_steering_function()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_steering_function_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSteeringFunctionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSteeringFunctionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSteeringFunctionResp::GetClassData() const { return &_class_data_; }

void TrafficSteeringFunctionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSteeringFunctionResp *>(to)->MergeFrom(
      static_cast<const TrafficSteeringFunctionResp &>(from));
}


void TrafficSteeringFunctionResp::MergeFrom(const TrafficSteeringFunctionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.TrafficSteeringFunctionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_traffic_steering_function()) {
    _internal_mutable_traffic_steering_function()->::bbf::sss::TrafficSteeringFunction::MergeFrom(from._internal_traffic_steering_function());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSteeringFunctionResp::CopyFrom(const TrafficSteeringFunctionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.TrafficSteeringFunctionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSteeringFunctionResp::IsInitialized() const {
  return true;
}

void TrafficSteeringFunctionResp::InternalSwap(TrafficSteeringFunctionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSteeringFunctionResp, result_)
      + sizeof(TrafficSteeringFunctionResp::result_)
      - PROTOBUF_FIELD_OFFSET(TrafficSteeringFunctionResp, traffic_steering_function_)>(
          reinterpret_cast<char*>(&traffic_steering_function_),
          reinterpret_cast<char*>(&other->traffic_steering_function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSteeringFunctionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[21]);
}

// ===================================================================

class ListTrafficSteeringFunctionReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListTrafficSteeringFunctionReq* msg);
};

const ::bbf::sss::ListFilter&
ListTrafficSteeringFunctionReq::_Internal::filter(const ListTrafficSteeringFunctionReq* msg) {
  return *msg->filter_;
}
ListTrafficSteeringFunctionReq::ListTrafficSteeringFunctionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListTrafficSteeringFunctionReq)
}
ListTrafficSteeringFunctionReq::ListTrafficSteeringFunctionReq(const ListTrafficSteeringFunctionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListTrafficSteeringFunctionReq)
}

inline void ListTrafficSteeringFunctionReq::SharedCtor() {
filter_ = nullptr;
}

ListTrafficSteeringFunctionReq::~ListTrafficSteeringFunctionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListTrafficSteeringFunctionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTrafficSteeringFunctionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListTrafficSteeringFunctionReq::ArenaDtor(void* object) {
  ListTrafficSteeringFunctionReq* _this = reinterpret_cast< ListTrafficSteeringFunctionReq* >(object);
  (void)_this;
}
void ListTrafficSteeringFunctionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTrafficSteeringFunctionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTrafficSteeringFunctionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTrafficSteeringFunctionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTrafficSteeringFunctionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListTrafficSteeringFunctionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListTrafficSteeringFunctionReq)
  return target;
}

size_t ListTrafficSteeringFunctionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListTrafficSteeringFunctionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTrafficSteeringFunctionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTrafficSteeringFunctionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTrafficSteeringFunctionReq::GetClassData() const { return &_class_data_; }

void ListTrafficSteeringFunctionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTrafficSteeringFunctionReq *>(to)->MergeFrom(
      static_cast<const ListTrafficSteeringFunctionReq &>(from));
}


void ListTrafficSteeringFunctionReq::MergeFrom(const ListTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListTrafficSteeringFunctionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTrafficSteeringFunctionReq::CopyFrom(const ListTrafficSteeringFunctionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListTrafficSteeringFunctionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrafficSteeringFunctionReq::IsInitialized() const {
  return true;
}

void ListTrafficSteeringFunctionReq::InternalSwap(ListTrafficSteeringFunctionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTrafficSteeringFunctionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[22]);
}

// ===================================================================

class ListTrafficSteeringFunctionResp::_Internal {
 public:
};

ListTrafficSteeringFunctionResp::ListTrafficSteeringFunctionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  traffic_steering_function_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListTrafficSteeringFunctionResp)
}
ListTrafficSteeringFunctionResp::ListTrafficSteeringFunctionResp(const ListTrafficSteeringFunctionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traffic_steering_function_(from.traffic_steering_function_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListTrafficSteeringFunctionResp)
}

inline void ListTrafficSteeringFunctionResp::SharedCtor() {
result_ = 0;
}

ListTrafficSteeringFunctionResp::~ListTrafficSteeringFunctionResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListTrafficSteeringFunctionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTrafficSteeringFunctionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListTrafficSteeringFunctionResp::ArenaDtor(void* object) {
  ListTrafficSteeringFunctionResp* _this = reinterpret_cast< ListTrafficSteeringFunctionResp* >(object);
  (void)_this;
}
void ListTrafficSteeringFunctionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTrafficSteeringFunctionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTrafficSteeringFunctionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListTrafficSteeringFunctionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_steering_function_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTrafficSteeringFunctionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_steering_function(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTrafficSteeringFunctionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListTrafficSteeringFunctionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_steering_function_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_traffic_steering_function(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListTrafficSteeringFunctionResp)
  return target;
}

size_t ListTrafficSteeringFunctionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListTrafficSteeringFunctionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.TrafficSteeringFunction traffic_steering_function = 2;
  total_size += 1UL * this->_internal_traffic_steering_function_size();
  for (const auto& msg : this->traffic_steering_function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTrafficSteeringFunctionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTrafficSteeringFunctionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTrafficSteeringFunctionResp::GetClassData() const { return &_class_data_; }

void ListTrafficSteeringFunctionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTrafficSteeringFunctionResp *>(to)->MergeFrom(
      static_cast<const ListTrafficSteeringFunctionResp &>(from));
}


void ListTrafficSteeringFunctionResp::MergeFrom(const ListTrafficSteeringFunctionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListTrafficSteeringFunctionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_steering_function_.MergeFrom(from.traffic_steering_function_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTrafficSteeringFunctionResp::CopyFrom(const ListTrafficSteeringFunctionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListTrafficSteeringFunctionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrafficSteeringFunctionResp::IsInitialized() const {
  return true;
}

void ListTrafficSteeringFunctionResp::InternalSwap(ListTrafficSteeringFunctionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  traffic_steering_function_.InternalSwap(&other->traffic_steering_function_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTrafficSteeringFunctionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[23]);
}

// ===================================================================

class UpdateServiceGatewayUserPlaneReq::_Internal {
 public:
  static const ::bbf::sss::ServiceGatewayUserPlane& service_gateway_user_plane(const UpdateServiceGatewayUserPlaneReq* msg);
};

const ::bbf::sss::ServiceGatewayUserPlane&
UpdateServiceGatewayUserPlaneReq::_Internal::service_gateway_user_plane(const UpdateServiceGatewayUserPlaneReq* msg) {
  return *msg->service_gateway_user_plane_;
}
UpdateServiceGatewayUserPlaneReq::UpdateServiceGatewayUserPlaneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateServiceGatewayUserPlaneReq)
}
UpdateServiceGatewayUserPlaneReq::UpdateServiceGatewayUserPlaneReq(const UpdateServiceGatewayUserPlaneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_gateway_user_plane()) {
    service_gateway_user_plane_ = new ::bbf::sss::ServiceGatewayUserPlane(*from.service_gateway_user_plane_);
  } else {
    service_gateway_user_plane_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateServiceGatewayUserPlaneReq)
}

inline void UpdateServiceGatewayUserPlaneReq::SharedCtor() {
service_gateway_user_plane_ = nullptr;
}

UpdateServiceGatewayUserPlaneReq::~UpdateServiceGatewayUserPlaneReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateServiceGatewayUserPlaneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_gateway_user_plane_;
}

void UpdateServiceGatewayUserPlaneReq::ArenaDtor(void* object) {
  UpdateServiceGatewayUserPlaneReq* _this = reinterpret_cast< UpdateServiceGatewayUserPlaneReq* >(object);
  (void)_this;
}
void UpdateServiceGatewayUserPlaneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServiceGatewayUserPlaneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateServiceGatewayUserPlaneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_gateway_user_plane_ != nullptr) {
    delete service_gateway_user_plane_;
  }
  service_gateway_user_plane_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServiceGatewayUserPlaneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway_user_plane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateServiceGatewayUserPlaneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 1;
  if (this->_internal_has_service_gateway_user_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::service_gateway_user_plane(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  return target;
}

size_t UpdateServiceGatewayUserPlaneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 1;
  if (this->_internal_has_service_gateway_user_plane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_gateway_user_plane_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateServiceGatewayUserPlaneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateServiceGatewayUserPlaneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateServiceGatewayUserPlaneReq::GetClassData() const { return &_class_data_; }

void UpdateServiceGatewayUserPlaneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateServiceGatewayUserPlaneReq *>(to)->MergeFrom(
      static_cast<const UpdateServiceGatewayUserPlaneReq &>(from));
}


void UpdateServiceGatewayUserPlaneReq::MergeFrom(const UpdateServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_gateway_user_plane()) {
    _internal_mutable_service_gateway_user_plane()->::bbf::sss::ServiceGatewayUserPlane::MergeFrom(from._internal_service_gateway_user_plane());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateServiceGatewayUserPlaneReq::CopyFrom(const UpdateServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateServiceGatewayUserPlaneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServiceGatewayUserPlaneReq::IsInitialized() const {
  return true;
}

void UpdateServiceGatewayUserPlaneReq::InternalSwap(UpdateServiceGatewayUserPlaneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(service_gateway_user_plane_, other->service_gateway_user_plane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServiceGatewayUserPlaneReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[24]);
}

// ===================================================================

class DeleteServiceGatewayUserPlaneReq::_Internal {
 public:
};

DeleteServiceGatewayUserPlaneReq::DeleteServiceGatewayUserPlaneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteServiceGatewayUserPlaneReq)
}
DeleteServiceGatewayUserPlaneReq::DeleteServiceGatewayUserPlaneReq(const DeleteServiceGatewayUserPlaneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteServiceGatewayUserPlaneReq)
}

inline void DeleteServiceGatewayUserPlaneReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteServiceGatewayUserPlaneReq::~DeleteServiceGatewayUserPlaneReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteServiceGatewayUserPlaneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteServiceGatewayUserPlaneReq::ArenaDtor(void* object) {
  DeleteServiceGatewayUserPlaneReq* _this = reinterpret_cast< DeleteServiceGatewayUserPlaneReq* >(object);
  (void)_this;
}
void DeleteServiceGatewayUserPlaneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteServiceGatewayUserPlaneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteServiceGatewayUserPlaneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteServiceGatewayUserPlaneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteServiceGatewayUserPlaneReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteServiceGatewayUserPlaneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteServiceGatewayUserPlaneReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  return target;
}

size_t DeleteServiceGatewayUserPlaneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteServiceGatewayUserPlaneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteServiceGatewayUserPlaneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteServiceGatewayUserPlaneReq::GetClassData() const { return &_class_data_; }

void DeleteServiceGatewayUserPlaneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteServiceGatewayUserPlaneReq *>(to)->MergeFrom(
      static_cast<const DeleteServiceGatewayUserPlaneReq &>(from));
}


void DeleteServiceGatewayUserPlaneReq::MergeFrom(const DeleteServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteServiceGatewayUserPlaneReq::CopyFrom(const DeleteServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteServiceGatewayUserPlaneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceGatewayUserPlaneReq::IsInitialized() const {
  return true;
}

void DeleteServiceGatewayUserPlaneReq::InternalSwap(DeleteServiceGatewayUserPlaneReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServiceGatewayUserPlaneReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[25]);
}

// ===================================================================

class GetServiceGatewayUserPlaneReq::_Internal {
 public:
};

GetServiceGatewayUserPlaneReq::GetServiceGatewayUserPlaneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetServiceGatewayUserPlaneReq)
}
GetServiceGatewayUserPlaneReq::GetServiceGatewayUserPlaneReq(const GetServiceGatewayUserPlaneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetServiceGatewayUserPlaneReq)
}

inline void GetServiceGatewayUserPlaneReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceGatewayUserPlaneReq::~GetServiceGatewayUserPlaneReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetServiceGatewayUserPlaneReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServiceGatewayUserPlaneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceGatewayUserPlaneReq::ArenaDtor(void* object) {
  GetServiceGatewayUserPlaneReq* _this = reinterpret_cast< GetServiceGatewayUserPlaneReq* >(object);
  (void)_this;
}
void GetServiceGatewayUserPlaneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceGatewayUserPlaneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceGatewayUserPlaneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceGatewayUserPlaneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetServiceGatewayUserPlaneReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceGatewayUserPlaneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetServiceGatewayUserPlaneReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetServiceGatewayUserPlaneReq)
  return target;
}

size_t GetServiceGatewayUserPlaneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetServiceGatewayUserPlaneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceGatewayUserPlaneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceGatewayUserPlaneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceGatewayUserPlaneReq::GetClassData() const { return &_class_data_; }

void GetServiceGatewayUserPlaneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceGatewayUserPlaneReq *>(to)->MergeFrom(
      static_cast<const GetServiceGatewayUserPlaneReq &>(from));
}


void GetServiceGatewayUserPlaneReq::MergeFrom(const GetServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetServiceGatewayUserPlaneReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceGatewayUserPlaneReq::CopyFrom(const GetServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetServiceGatewayUserPlaneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceGatewayUserPlaneReq::IsInitialized() const {
  return true;
}

void GetServiceGatewayUserPlaneReq::InternalSwap(GetServiceGatewayUserPlaneReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceGatewayUserPlaneReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[26]);
}

// ===================================================================

class ServiceGatewayUserPlaneResp::_Internal {
 public:
  static const ::bbf::sss::ServiceGatewayUserPlane& service_gateway_user_plane(const ServiceGatewayUserPlaneResp* msg);
};

const ::bbf::sss::ServiceGatewayUserPlane&
ServiceGatewayUserPlaneResp::_Internal::service_gateway_user_plane(const ServiceGatewayUserPlaneResp* msg) {
  return *msg->service_gateway_user_plane_;
}
ServiceGatewayUserPlaneResp::ServiceGatewayUserPlaneResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGatewayUserPlaneResp)
}
ServiceGatewayUserPlaneResp::ServiceGatewayUserPlaneResp(const ServiceGatewayUserPlaneResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_gateway_user_plane()) {
    service_gateway_user_plane_ = new ::bbf::sss::ServiceGatewayUserPlane(*from.service_gateway_user_plane_);
  } else {
    service_gateway_user_plane_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGatewayUserPlaneResp)
}

inline void ServiceGatewayUserPlaneResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_gateway_user_plane_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&service_gateway_user_plane_)) + sizeof(result_));
}

ServiceGatewayUserPlaneResp::~ServiceGatewayUserPlaneResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGatewayUserPlaneResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGatewayUserPlaneResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_gateway_user_plane_;
}

void ServiceGatewayUserPlaneResp::ArenaDtor(void* object) {
  ServiceGatewayUserPlaneResp* _this = reinterpret_cast< ServiceGatewayUserPlaneResp* >(object);
  (void)_this;
}
void ServiceGatewayUserPlaneResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGatewayUserPlaneResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGatewayUserPlaneResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGatewayUserPlaneResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_gateway_user_plane_ != nullptr) {
    delete service_gateway_user_plane_;
  }
  service_gateway_user_plane_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGatewayUserPlaneResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway_user_plane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGatewayUserPlaneResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGatewayUserPlaneResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
  if (this->_internal_has_service_gateway_user_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_gateway_user_plane(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGatewayUserPlaneResp)
  return target;
}

size_t ServiceGatewayUserPlaneResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGatewayUserPlaneResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
  if (this->_internal_has_service_gateway_user_plane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_gateway_user_plane_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGatewayUserPlaneResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGatewayUserPlaneResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGatewayUserPlaneResp::GetClassData() const { return &_class_data_; }

void ServiceGatewayUserPlaneResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGatewayUserPlaneResp *>(to)->MergeFrom(
      static_cast<const ServiceGatewayUserPlaneResp &>(from));
}


void ServiceGatewayUserPlaneResp::MergeFrom(const ServiceGatewayUserPlaneResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGatewayUserPlaneResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_gateway_user_plane()) {
    _internal_mutable_service_gateway_user_plane()->::bbf::sss::ServiceGatewayUserPlane::MergeFrom(from._internal_service_gateway_user_plane());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGatewayUserPlaneResp::CopyFrom(const ServiceGatewayUserPlaneResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGatewayUserPlaneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGatewayUserPlaneResp::IsInitialized() const {
  return true;
}

void ServiceGatewayUserPlaneResp::InternalSwap(ServiceGatewayUserPlaneResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlaneResp, result_)
      + sizeof(ServiceGatewayUserPlaneResp::result_)
      - PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlaneResp, service_gateway_user_plane_)>(
          reinterpret_cast<char*>(&service_gateway_user_plane_),
          reinterpret_cast<char*>(&other->service_gateway_user_plane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGatewayUserPlaneResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[27]);
}

// ===================================================================

class ListServiceGatewayUserPlaneReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListServiceGatewayUserPlaneReq* msg);
};

const ::bbf::sss::ListFilter&
ListServiceGatewayUserPlaneReq::_Internal::filter(const ListServiceGatewayUserPlaneReq* msg) {
  return *msg->filter_;
}
ListServiceGatewayUserPlaneReq::ListServiceGatewayUserPlaneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListServiceGatewayUserPlaneReq)
}
ListServiceGatewayUserPlaneReq::ListServiceGatewayUserPlaneReq(const ListServiceGatewayUserPlaneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListServiceGatewayUserPlaneReq)
}

inline void ListServiceGatewayUserPlaneReq::SharedCtor() {
filter_ = nullptr;
}

ListServiceGatewayUserPlaneReq::~ListServiceGatewayUserPlaneReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListServiceGatewayUserPlaneReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListServiceGatewayUserPlaneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListServiceGatewayUserPlaneReq::ArenaDtor(void* object) {
  ListServiceGatewayUserPlaneReq* _this = reinterpret_cast< ListServiceGatewayUserPlaneReq* >(object);
  (void)_this;
}
void ListServiceGatewayUserPlaneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListServiceGatewayUserPlaneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListServiceGatewayUserPlaneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServiceGatewayUserPlaneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServiceGatewayUserPlaneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListServiceGatewayUserPlaneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 2;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListServiceGatewayUserPlaneReq)
  return target;
}

size_t ListServiceGatewayUserPlaneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListServiceGatewayUserPlaneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 2;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServiceGatewayUserPlaneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListServiceGatewayUserPlaneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServiceGatewayUserPlaneReq::GetClassData() const { return &_class_data_; }

void ListServiceGatewayUserPlaneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListServiceGatewayUserPlaneReq *>(to)->MergeFrom(
      static_cast<const ListServiceGatewayUserPlaneReq &>(from));
}


void ListServiceGatewayUserPlaneReq::MergeFrom(const ListServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListServiceGatewayUserPlaneReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServiceGatewayUserPlaneReq::CopyFrom(const ListServiceGatewayUserPlaneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListServiceGatewayUserPlaneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceGatewayUserPlaneReq::IsInitialized() const {
  return true;
}

void ListServiceGatewayUserPlaneReq::InternalSwap(ListServiceGatewayUserPlaneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServiceGatewayUserPlaneReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[28]);
}

// ===================================================================

class ListServiceGatewayUserPlaneResp::_Internal {
 public:
};

ListServiceGatewayUserPlaneResp::ListServiceGatewayUserPlaneResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_gateway_user_plane_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListServiceGatewayUserPlaneResp)
}
ListServiceGatewayUserPlaneResp::ListServiceGatewayUserPlaneResp(const ListServiceGatewayUserPlaneResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_gateway_user_plane_(from.service_gateway_user_plane_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListServiceGatewayUserPlaneResp)
}

inline void ListServiceGatewayUserPlaneResp::SharedCtor() {
result_ = 0;
}

ListServiceGatewayUserPlaneResp::~ListServiceGatewayUserPlaneResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListServiceGatewayUserPlaneResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListServiceGatewayUserPlaneResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListServiceGatewayUserPlaneResp::ArenaDtor(void* object) {
  ListServiceGatewayUserPlaneResp* _this = reinterpret_cast< ListServiceGatewayUserPlaneResp* >(object);
  (void)_this;
}
void ListServiceGatewayUserPlaneResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListServiceGatewayUserPlaneResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListServiceGatewayUserPlaneResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListServiceGatewayUserPlaneResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_gateway_user_plane_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListServiceGatewayUserPlaneResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_gateway_user_plane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListServiceGatewayUserPlaneResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListServiceGatewayUserPlaneResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_service_gateway_user_plane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_service_gateway_user_plane(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListServiceGatewayUserPlaneResp)
  return target;
}

size_t ListServiceGatewayUserPlaneResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListServiceGatewayUserPlaneResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.ServiceGatewayUserPlane service_gateway_user_plane = 2;
  total_size += 1UL * this->_internal_service_gateway_user_plane_size();
  for (const auto& msg : this->service_gateway_user_plane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListServiceGatewayUserPlaneResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListServiceGatewayUserPlaneResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListServiceGatewayUserPlaneResp::GetClassData() const { return &_class_data_; }

void ListServiceGatewayUserPlaneResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListServiceGatewayUserPlaneResp *>(to)->MergeFrom(
      static_cast<const ListServiceGatewayUserPlaneResp &>(from));
}


void ListServiceGatewayUserPlaneResp::MergeFrom(const ListServiceGatewayUserPlaneResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListServiceGatewayUserPlaneResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_gateway_user_plane_.MergeFrom(from.service_gateway_user_plane_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListServiceGatewayUserPlaneResp::CopyFrom(const ListServiceGatewayUserPlaneResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListServiceGatewayUserPlaneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceGatewayUserPlaneResp::IsInitialized() const {
  return true;
}

void ListServiceGatewayUserPlaneResp::InternalSwap(ListServiceGatewayUserPlaneResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_gateway_user_plane_.InternalSwap(&other->service_gateway_user_plane_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListServiceGatewayUserPlaneResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[29]);
}

// ===================================================================

class UpdateNetworkConnectionReq::_Internal {
 public:
  static const ::bbf::sss::NetworkConnection& network_connection(const UpdateNetworkConnectionReq* msg);
};

const ::bbf::sss::NetworkConnection&
UpdateNetworkConnectionReq::_Internal::network_connection(const UpdateNetworkConnectionReq* msg) {
  return *msg->network_connection_;
}
UpdateNetworkConnectionReq::UpdateNetworkConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateNetworkConnectionReq)
}
UpdateNetworkConnectionReq::UpdateNetworkConnectionReq(const UpdateNetworkConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_connection()) {
    network_connection_ = new ::bbf::sss::NetworkConnection(*from.network_connection_);
  } else {
    network_connection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateNetworkConnectionReq)
}

inline void UpdateNetworkConnectionReq::SharedCtor() {
network_connection_ = nullptr;
}

UpdateNetworkConnectionReq::~UpdateNetworkConnectionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateNetworkConnectionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateNetworkConnectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete network_connection_;
}

void UpdateNetworkConnectionReq::ArenaDtor(void* object) {
  UpdateNetworkConnectionReq* _this = reinterpret_cast< UpdateNetworkConnectionReq* >(object);
  (void)_this;
}
void UpdateNetworkConnectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetworkConnectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateNetworkConnectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && network_connection_ != nullptr) {
    delete network_connection_;
  }
  network_connection_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetworkConnectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.NetworkConnection network_connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateNetworkConnectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.NetworkConnection network_connection = 1;
  if (this->_internal_has_network_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network_connection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateNetworkConnectionReq)
  return target;
}

size_t UpdateNetworkConnectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateNetworkConnectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.NetworkConnection network_connection = 1;
  if (this->_internal_has_network_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_connection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNetworkConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateNetworkConnectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNetworkConnectionReq::GetClassData() const { return &_class_data_; }

void UpdateNetworkConnectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateNetworkConnectionReq *>(to)->MergeFrom(
      static_cast<const UpdateNetworkConnectionReq &>(from));
}


void UpdateNetworkConnectionReq::MergeFrom(const UpdateNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateNetworkConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_network_connection()) {
    _internal_mutable_network_connection()->::bbf::sss::NetworkConnection::MergeFrom(from._internal_network_connection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNetworkConnectionReq::CopyFrom(const UpdateNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateNetworkConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetworkConnectionReq::IsInitialized() const {
  return true;
}

void UpdateNetworkConnectionReq::InternalSwap(UpdateNetworkConnectionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(network_connection_, other->network_connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetworkConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[30]);
}

// ===================================================================

class DeleteNetworkConnectionReq::_Internal {
 public:
};

DeleteNetworkConnectionReq::DeleteNetworkConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteNetworkConnectionReq)
}
DeleteNetworkConnectionReq::DeleteNetworkConnectionReq(const DeleteNetworkConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteNetworkConnectionReq)
}

inline void DeleteNetworkConnectionReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteNetworkConnectionReq::~DeleteNetworkConnectionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteNetworkConnectionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteNetworkConnectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteNetworkConnectionReq::ArenaDtor(void* object) {
  DeleteNetworkConnectionReq* _this = reinterpret_cast< DeleteNetworkConnectionReq* >(object);
  (void)_this;
}
void DeleteNetworkConnectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteNetworkConnectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteNetworkConnectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNetworkConnectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteNetworkConnectionReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteNetworkConnectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteNetworkConnectionReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteNetworkConnectionReq)
  return target;
}

size_t DeleteNetworkConnectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteNetworkConnectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteNetworkConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteNetworkConnectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteNetworkConnectionReq::GetClassData() const { return &_class_data_; }

void DeleteNetworkConnectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteNetworkConnectionReq *>(to)->MergeFrom(
      static_cast<const DeleteNetworkConnectionReq &>(from));
}


void DeleteNetworkConnectionReq::MergeFrom(const DeleteNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteNetworkConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteNetworkConnectionReq::CopyFrom(const DeleteNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteNetworkConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNetworkConnectionReq::IsInitialized() const {
  return true;
}

void DeleteNetworkConnectionReq::InternalSwap(DeleteNetworkConnectionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNetworkConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[31]);
}

// ===================================================================

class GetNetworkConnectionReq::_Internal {
 public:
};

GetNetworkConnectionReq::GetNetworkConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetNetworkConnectionReq)
}
GetNetworkConnectionReq::GetNetworkConnectionReq(const GetNetworkConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetNetworkConnectionReq)
}

inline void GetNetworkConnectionReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNetworkConnectionReq::~GetNetworkConnectionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetNetworkConnectionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNetworkConnectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNetworkConnectionReq::ArenaDtor(void* object) {
  GetNetworkConnectionReq* _this = reinterpret_cast< GetNetworkConnectionReq* >(object);
  (void)_this;
}
void GetNetworkConnectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkConnectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetworkConnectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkConnectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetNetworkConnectionReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNetworkConnectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetNetworkConnectionReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetNetworkConnectionReq)
  return target;
}

size_t GetNetworkConnectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetNetworkConnectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetworkConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNetworkConnectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetworkConnectionReq::GetClassData() const { return &_class_data_; }

void GetNetworkConnectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNetworkConnectionReq *>(to)->MergeFrom(
      static_cast<const GetNetworkConnectionReq &>(from));
}


void GetNetworkConnectionReq::MergeFrom(const GetNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetNetworkConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNetworkConnectionReq::CopyFrom(const GetNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetNetworkConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkConnectionReq::IsInitialized() const {
  return true;
}

void GetNetworkConnectionReq::InternalSwap(GetNetworkConnectionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[32]);
}

// ===================================================================

class NetworkConnectionResp::_Internal {
 public:
  static const ::bbf::sss::NetworkConnection& network_connection(const NetworkConnectionResp* msg);
};

const ::bbf::sss::NetworkConnection&
NetworkConnectionResp::_Internal::network_connection(const NetworkConnectionResp* msg) {
  return *msg->network_connection_;
}
NetworkConnectionResp::NetworkConnectionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.NetworkConnectionResp)
}
NetworkConnectionResp::NetworkConnectionResp(const NetworkConnectionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_connection()) {
    network_connection_ = new ::bbf::sss::NetworkConnection(*from.network_connection_);
  } else {
    network_connection_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.NetworkConnectionResp)
}

inline void NetworkConnectionResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&network_connection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&network_connection_)) + sizeof(result_));
}

NetworkConnectionResp::~NetworkConnectionResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.NetworkConnectionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkConnectionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete network_connection_;
}

void NetworkConnectionResp::ArenaDtor(void* object) {
  NetworkConnectionResp* _this = reinterpret_cast< NetworkConnectionResp* >(object);
  (void)_this;
}
void NetworkConnectionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConnectionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConnectionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.NetworkConnectionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && network_connection_ != nullptr) {
    delete network_connection_;
  }
  network_connection_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConnectionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.NetworkConnection network_connection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkConnectionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.NetworkConnectionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.NetworkConnection network_connection = 2;
  if (this->_internal_has_network_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_connection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.NetworkConnectionResp)
  return target;
}

size_t NetworkConnectionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.NetworkConnectionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.NetworkConnection network_connection = 2;
  if (this->_internal_has_network_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_connection_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkConnectionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkConnectionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkConnectionResp::GetClassData() const { return &_class_data_; }

void NetworkConnectionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkConnectionResp *>(to)->MergeFrom(
      static_cast<const NetworkConnectionResp &>(from));
}


void NetworkConnectionResp::MergeFrom(const NetworkConnectionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.NetworkConnectionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_network_connection()) {
    _internal_mutable_network_connection()->::bbf::sss::NetworkConnection::MergeFrom(from._internal_network_connection());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkConnectionResp::CopyFrom(const NetworkConnectionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.NetworkConnectionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnectionResp::IsInitialized() const {
  return true;
}

void NetworkConnectionResp::InternalSwap(NetworkConnectionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkConnectionResp, result_)
      + sizeof(NetworkConnectionResp::result_)
      - PROTOBUF_FIELD_OFFSET(NetworkConnectionResp, network_connection_)>(
          reinterpret_cast<char*>(&network_connection_),
          reinterpret_cast<char*>(&other->network_connection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnectionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[33]);
}

// ===================================================================

class ListNetworkConnectionReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListNetworkConnectionReq* msg);
};

const ::bbf::sss::ListFilter&
ListNetworkConnectionReq::_Internal::filter(const ListNetworkConnectionReq* msg) {
  return *msg->filter_;
}
ListNetworkConnectionReq::ListNetworkConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListNetworkConnectionReq)
}
ListNetworkConnectionReq::ListNetworkConnectionReq(const ListNetworkConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListNetworkConnectionReq)
}

inline void ListNetworkConnectionReq::SharedCtor() {
filter_ = nullptr;
}

ListNetworkConnectionReq::~ListNetworkConnectionReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListNetworkConnectionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNetworkConnectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListNetworkConnectionReq::ArenaDtor(void* object) {
  ListNetworkConnectionReq* _this = reinterpret_cast< ListNetworkConnectionReq* >(object);
  (void)_this;
}
void ListNetworkConnectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetworkConnectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNetworkConnectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetworkConnectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetworkConnectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListNetworkConnectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListNetworkConnectionReq)
  return target;
}

size_t ListNetworkConnectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListNetworkConnectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetworkConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNetworkConnectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetworkConnectionReq::GetClassData() const { return &_class_data_; }

void ListNetworkConnectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListNetworkConnectionReq *>(to)->MergeFrom(
      static_cast<const ListNetworkConnectionReq &>(from));
}


void ListNetworkConnectionReq::MergeFrom(const ListNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListNetworkConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetworkConnectionReq::CopyFrom(const ListNetworkConnectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListNetworkConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetworkConnectionReq::IsInitialized() const {
  return true;
}

void ListNetworkConnectionReq::InternalSwap(ListNetworkConnectionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetworkConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[34]);
}

// ===================================================================

class ListNetworkConnectionResp::_Internal {
 public:
};

ListNetworkConnectionResp::ListNetworkConnectionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  network_connection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListNetworkConnectionResp)
}
ListNetworkConnectionResp::ListNetworkConnectionResp(const ListNetworkConnectionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      network_connection_(from.network_connection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListNetworkConnectionResp)
}

inline void ListNetworkConnectionResp::SharedCtor() {
result_ = 0;
}

ListNetworkConnectionResp::~ListNetworkConnectionResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListNetworkConnectionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNetworkConnectionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListNetworkConnectionResp::ArenaDtor(void* object) {
  ListNetworkConnectionResp* _this = reinterpret_cast< ListNetworkConnectionResp* >(object);
  (void)_this;
}
void ListNetworkConnectionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetworkConnectionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNetworkConnectionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListNetworkConnectionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_connection_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetworkConnectionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bbf.sss.NetworkConnection network_connection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_network_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetworkConnectionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListNetworkConnectionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .bbf.sss.NetworkConnection network_connection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_network_connection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_network_connection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListNetworkConnectionResp)
  return target;
}

size_t ListNetworkConnectionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListNetworkConnectionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.NetworkConnection network_connection = 2;
  total_size += 1UL * this->_internal_network_connection_size();
  for (const auto& msg : this->network_connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetworkConnectionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNetworkConnectionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetworkConnectionResp::GetClassData() const { return &_class_data_; }

void ListNetworkConnectionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListNetworkConnectionResp *>(to)->MergeFrom(
      static_cast<const ListNetworkConnectionResp &>(from));
}


void ListNetworkConnectionResp::MergeFrom(const ListNetworkConnectionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListNetworkConnectionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  network_connection_.MergeFrom(from.network_connection_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetworkConnectionResp::CopyFrom(const ListNetworkConnectionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListNetworkConnectionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetworkConnectionResp::IsInitialized() const {
  return true;
}

void ListNetworkConnectionResp::InternalSwap(ListNetworkConnectionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  network_connection_.InternalSwap(&other->network_connection_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetworkConnectionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[35]);
}

// ===================================================================

class UpdateSessionContextReq::_Internal {
 public:
  static const ::bbf::sss::SessionContext& session_context(const UpdateSessionContextReq* msg);
};

const ::bbf::sss::SessionContext&
UpdateSessionContextReq::_Internal::session_context(const UpdateSessionContextReq* msg) {
  return *msg->session_context_;
}
UpdateSessionContextReq::UpdateSessionContextReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.UpdateSessionContextReq)
}
UpdateSessionContextReq::UpdateSessionContextReq(const UpdateSessionContextReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session_context()) {
    session_context_ = new ::bbf::sss::SessionContext(*from.session_context_);
  } else {
    session_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.UpdateSessionContextReq)
}

inline void UpdateSessionContextReq::SharedCtor() {
session_context_ = nullptr;
}

UpdateSessionContextReq::~UpdateSessionContextReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.UpdateSessionContextReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSessionContextReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete session_context_;
}

void UpdateSessionContextReq::ArenaDtor(void* object) {
  UpdateSessionContextReq* _this = reinterpret_cast< UpdateSessionContextReq* >(object);
  (void)_this;
}
void UpdateSessionContextReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSessionContextReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSessionContextReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.UpdateSessionContextReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && session_context_ != nullptr) {
    delete session_context_;
  }
  session_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSessionContextReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.SessionContext session_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSessionContextReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.UpdateSessionContextReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.SessionContext session_context = 1;
  if (this->_internal_has_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.UpdateSessionContextReq)
  return target;
}

size_t UpdateSessionContextReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.UpdateSessionContextReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.SessionContext session_context = 1;
  if (this->_internal_has_session_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSessionContextReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSessionContextReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSessionContextReq::GetClassData() const { return &_class_data_; }

void UpdateSessionContextReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSessionContextReq *>(to)->MergeFrom(
      static_cast<const UpdateSessionContextReq &>(from));
}


void UpdateSessionContextReq::MergeFrom(const UpdateSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.UpdateSessionContextReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_context()) {
    _internal_mutable_session_context()->::bbf::sss::SessionContext::MergeFrom(from._internal_session_context());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSessionContextReq::CopyFrom(const UpdateSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.UpdateSessionContextReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSessionContextReq::IsInitialized() const {
  return true;
}

void UpdateSessionContextReq::InternalSwap(UpdateSessionContextReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(session_context_, other->session_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSessionContextReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[36]);
}

// ===================================================================

class DeleteSessionContextReq::_Internal {
 public:
};

DeleteSessionContextReq::DeleteSessionContextReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.DeleteSessionContextReq)
}
DeleteSessionContextReq::DeleteSessionContextReq(const DeleteSessionContextReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.DeleteSessionContextReq)
}

inline void DeleteSessionContextReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSessionContextReq::~DeleteSessionContextReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.DeleteSessionContextReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteSessionContextReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSessionContextReq::ArenaDtor(void* object) {
  DeleteSessionContextReq* _this = reinterpret_cast< DeleteSessionContextReq* >(object);
  (void)_this;
}
void DeleteSessionContextReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSessionContextReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSessionContextReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.DeleteSessionContextReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSessionContextReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.DeleteSessionContextReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSessionContextReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.DeleteSessionContextReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.DeleteSessionContextReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.DeleteSessionContextReq)
  return target;
}

size_t DeleteSessionContextReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.DeleteSessionContextReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSessionContextReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteSessionContextReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSessionContextReq::GetClassData() const { return &_class_data_; }

void DeleteSessionContextReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteSessionContextReq *>(to)->MergeFrom(
      static_cast<const DeleteSessionContextReq &>(from));
}


void DeleteSessionContextReq::MergeFrom(const DeleteSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.DeleteSessionContextReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSessionContextReq::CopyFrom(const DeleteSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.DeleteSessionContextReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSessionContextReq::IsInitialized() const {
  return true;
}

void DeleteSessionContextReq::InternalSwap(DeleteSessionContextReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSessionContextReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[37]);
}

// ===================================================================

class GetSessionContextReq::_Internal {
 public:
};

GetSessionContextReq::GetSessionContextReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.GetSessionContextReq)
}
GetSessionContextReq::GetSessionContextReq(const GetSessionContextReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.GetSessionContextReq)
}

inline void GetSessionContextReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSessionContextReq::~GetSessionContextReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.GetSessionContextReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSessionContextReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSessionContextReq::ArenaDtor(void* object) {
  GetSessionContextReq* _this = reinterpret_cast< GetSessionContextReq* >(object);
  (void)_this;
}
void GetSessionContextReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSessionContextReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSessionContextReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.GetSessionContextReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSessionContextReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.GetSessionContextReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSessionContextReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.GetSessionContextReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.GetSessionContextReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.GetSessionContextReq)
  return target;
}

size_t GetSessionContextReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.GetSessionContextReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSessionContextReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSessionContextReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSessionContextReq::GetClassData() const { return &_class_data_; }

void GetSessionContextReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSessionContextReq *>(to)->MergeFrom(
      static_cast<const GetSessionContextReq &>(from));
}


void GetSessionContextReq::MergeFrom(const GetSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.GetSessionContextReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSessionContextReq::CopyFrom(const GetSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.GetSessionContextReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionContextReq::IsInitialized() const {
  return true;
}

void GetSessionContextReq::InternalSwap(GetSessionContextReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSessionContextReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[38]);
}

// ===================================================================

class SessionContextResp::_Internal {
 public:
  static const ::bbf::sss::SessionContext& session_context(const SessionContextResp* msg);
};

const ::bbf::sss::SessionContext&
SessionContextResp::_Internal::session_context(const SessionContextResp* msg) {
  return *msg->session_context_;
}
SessionContextResp::SessionContextResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SessionContextResp)
}
SessionContextResp::SessionContextResp(const SessionContextResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session_context()) {
    session_context_ = new ::bbf::sss::SessionContext(*from.session_context_);
  } else {
    session_context_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SessionContextResp)
}

inline void SessionContextResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&session_context_)) + sizeof(result_));
}

SessionContextResp::~SessionContextResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.SessionContextResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionContextResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete session_context_;
}

void SessionContextResp::ArenaDtor(void* object) {
  SessionContextResp* _this = reinterpret_cast< SessionContextResp* >(object);
  (void)_this;
}
void SessionContextResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContextResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionContextResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SessionContextResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && session_context_ != nullptr) {
    delete session_context_;
  }
  session_context_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContextResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bbf::sss::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext session_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionContextResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SessionContextResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .bbf.sss.SessionContext session_context = 2;
  if (this->_internal_has_session_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SessionContextResp)
  return target;
}

size_t SessionContextResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SessionContextResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.SessionContext session_context = 2;
  if (this->_internal_has_session_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_context_);
  }

  // .bbf.sss.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionContextResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionContextResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionContextResp::GetClassData() const { return &_class_data_; }

void SessionContextResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionContextResp *>(to)->MergeFrom(
      static_cast<const SessionContextResp &>(from));
}


void SessionContextResp::MergeFrom(const SessionContextResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SessionContextResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_context()) {
    _internal_mutable_session_context()->::bbf::sss::SessionContext::MergeFrom(from._internal_session_context());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionContextResp::CopyFrom(const SessionContextResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SessionContextResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContextResp::IsInitialized() const {
  return true;
}

void SessionContextResp::InternalSwap(SessionContextResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionContextResp, result_)
      + sizeof(SessionContextResp::result_)
      - PROTOBUF_FIELD_OFFSET(SessionContextResp, session_context_)>(
          reinterpret_cast<char*>(&session_context_),
          reinterpret_cast<char*>(&other->session_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContextResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[39]);
}

// ===================================================================

class ListSessionContextReq::_Internal {
 public:
  static const ::bbf::sss::ListFilter& filter(const ListSessionContextReq* msg);
};

const ::bbf::sss::ListFilter&
ListSessionContextReq::_Internal::filter(const ListSessionContextReq* msg) {
  return *msg->filter_;
}
ListSessionContextReq::ListSessionContextReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListSessionContextReq)
}
ListSessionContextReq::ListSessionContextReq(const ListSessionContextReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::bbf::sss::ListFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListSessionContextReq)
}

inline void ListSessionContextReq::SharedCtor() {
filter_ = nullptr;
}

ListSessionContextReq::~ListSessionContextReq() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListSessionContextReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSessionContextReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void ListSessionContextReq::ArenaDtor(void* object) {
  ListSessionContextReq* _this = reinterpret_cast< ListSessionContextReq* >(object);
  (void)_this;
}
void ListSessionContextReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSessionContextReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSessionContextReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListSessionContextReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSessionContextReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.ListFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSessionContextReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListSessionContextReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListSessionContextReq)
  return target;
}

size_t ListSessionContextReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListSessionContextReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.ListFilter filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionContextReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSessionContextReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionContextReq::GetClassData() const { return &_class_data_; }

void ListSessionContextReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSessionContextReq *>(to)->MergeFrom(
      static_cast<const ListSessionContextReq &>(from));
}


void ListSessionContextReq::MergeFrom(const ListSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListSessionContextReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::bbf::sss::ListFilter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSessionContextReq::CopyFrom(const ListSessionContextReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListSessionContextReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSessionContextReq::IsInitialized() const {
  return true;
}

void ListSessionContextReq::InternalSwap(ListSessionContextReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSessionContextReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[40]);
}

// ===================================================================

class ListSessionContextResp::_Internal {
 public:
};

ListSessionContextResp::ListSessionContextResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_context_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ListSessionContextResp)
}
ListSessionContextResp::ListSessionContextResp(const ListSessionContextResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_context_(from.session_context_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ListSessionContextResp)
}

inline void ListSessionContextResp::SharedCtor() {
}

ListSessionContextResp::~ListSessionContextResp() {
  // @@protoc_insertion_point(destructor:bbf.sss.ListSessionContextResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSessionContextResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListSessionContextResp::ArenaDtor(void* object) {
  ListSessionContextResp* _this = reinterpret_cast< ListSessionContextResp* >(object);
  (void)_this;
}
void ListSessionContextResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSessionContextResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSessionContextResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ListSessionContextResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_context_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSessionContextResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bbf.sss.SessionContext session_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSessionContextResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ListSessionContextResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bbf.sss.SessionContext session_context = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_context_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_session_context(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ListSessionContextResp)
  return target;
}

size_t ListSessionContextResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ListSessionContextResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bbf.sss.SessionContext session_context = 1;
  total_size += 1UL * this->_internal_session_context_size();
  for (const auto& msg : this->session_context_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionContextResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSessionContextResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionContextResp::GetClassData() const { return &_class_data_; }

void ListSessionContextResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSessionContextResp *>(to)->MergeFrom(
      static_cast<const ListSessionContextResp &>(from));
}


void ListSessionContextResp::MergeFrom(const ListSessionContextResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ListSessionContextResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_context_.MergeFrom(from.session_context_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSessionContextResp::CopyFrom(const ListSessionContextResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ListSessionContextResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSessionContextResp::IsInitialized() const {
  return true;
}

void ListSessionContextResp::InternalSwap(ListSessionContextResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_context_.InternalSwap(&other->session_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSessionContextResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[41]);
}

// ===================================================================

class ServiceGatewayUserPlane_Spec::_Internal {
 public:
};

ServiceGatewayUserPlane_Spec::ServiceGatewayUserPlane_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supported_service_group_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGatewayUserPlane.Spec)
}
ServiceGatewayUserPlane_Spec::ServiceGatewayUserPlane_Spec(const ServiceGatewayUserPlane_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_service_group_(from.supported_service_group_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  access_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    access_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_ip_address().empty()) {
    access_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_access_ip_address(), 
      GetArenaForAllocation());
  }
  core_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    core_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_core_ip_address().empty()) {
    core_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_core_ip_address(), 
      GetArenaForAllocation());
  }
  access_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    access_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_mac().empty()) {
    access_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_access_mac(), 
      GetArenaForAllocation());
  }
  core_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    core_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_core_mac().empty()) {
    core_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_core_mac(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_session_count_, &from.max_session_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&maintenence_) -
    reinterpret_cast<char*>(&max_session_count_)) + sizeof(maintenence_));
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGatewayUserPlane.Spec)
}

inline void ServiceGatewayUserPlane_Spec::SharedCtor() {
access_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  access_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
core_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  core_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
access_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  access_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
core_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  core_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_session_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maintenence_) -
    reinterpret_cast<char*>(&max_session_count_)) + sizeof(maintenence_));
}

ServiceGatewayUserPlane_Spec::~ServiceGatewayUserPlane_Spec() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGatewayUserPlane.Spec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGatewayUserPlane_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  access_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  core_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  core_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceGatewayUserPlane_Spec::ArenaDtor(void* object) {
  ServiceGatewayUserPlane_Spec* _this = reinterpret_cast< ServiceGatewayUserPlane_Spec* >(object);
  (void)_this;
}
void ServiceGatewayUserPlane_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGatewayUserPlane_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGatewayUserPlane_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGatewayUserPlane.Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_service_group_.Clear();
  access_ip_address_.ClearToEmpty();
  core_ip_address_.ClearToEmpty();
  access_mac_.ClearToEmpty();
  core_mac_.ClearToEmpty();
  ::memset(&max_session_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maintenence_) -
      reinterpret_cast<char*>(&max_session_count_)) + sizeof(maintenence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGatewayUserPlane_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_session_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_service_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_service_group();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.Spec.supported_service_group"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool maintenence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          maintenence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_ip_address = 9901;
      case 9901:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_access_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.Spec.access_ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string core_ip_address = 9902;
      case 9902:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_core_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.Spec.core_ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_mac = 9903;
      case 9903:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_access_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.Spec.access_mac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string core_mac = 9904;
      case 9904:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_core_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.Spec.core_mac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGatewayUserPlane_Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGatewayUserPlane.Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_session_count = 1;
  if (this->_internal_max_session_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_session_count(), target);
  }

  // repeated string supported_service_group = 2;
  for (int i = 0, n = this->_internal_supported_service_group_size(); i < n; i++) {
    const auto& s = this->_internal_supported_service_group(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.Spec.supported_service_group");
    target = stream->WriteString(2, s, target);
  }

  // bool maintenence = 3;
  if (this->_internal_maintenence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_maintenence(), target);
  }

  // string access_ip_address = 9901;
  if (!this->_internal_access_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_ip_address().data(), static_cast<int>(this->_internal_access_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.Spec.access_ip_address");
    target = stream->WriteStringMaybeAliased(
        9901, this->_internal_access_ip_address(), target);
  }

  // string core_ip_address = 9902;
  if (!this->_internal_core_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_core_ip_address().data(), static_cast<int>(this->_internal_core_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.Spec.core_ip_address");
    target = stream->WriteStringMaybeAliased(
        9902, this->_internal_core_ip_address(), target);
  }

  // string access_mac = 9903;
  if (!this->_internal_access_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_mac().data(), static_cast<int>(this->_internal_access_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.Spec.access_mac");
    target = stream->WriteStringMaybeAliased(
        9903, this->_internal_access_mac(), target);
  }

  // string core_mac = 9904;
  if (!this->_internal_core_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_core_mac().data(), static_cast<int>(this->_internal_core_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.Spec.core_mac");
    target = stream->WriteStringMaybeAliased(
        9904, this->_internal_core_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGatewayUserPlane.Spec)
  return target;
}

size_t ServiceGatewayUserPlane_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGatewayUserPlane.Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_service_group = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_service_group_.size());
  for (int i = 0, n = supported_service_group_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_service_group_.Get(i));
  }

  // string access_ip_address = 9901;
  if (!this->_internal_access_ip_address().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_ip_address());
  }

  // string core_ip_address = 9902;
  if (!this->_internal_core_ip_address().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_core_ip_address());
  }

  // string access_mac = 9903;
  if (!this->_internal_access_mac().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_mac());
  }

  // string core_mac = 9904;
  if (!this->_internal_core_mac().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_core_mac());
  }

  // int32 max_session_count = 1;
  if (this->_internal_max_session_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_session_count());
  }

  // bool maintenence = 3;
  if (this->_internal_maintenence() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGatewayUserPlane_Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGatewayUserPlane_Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGatewayUserPlane_Spec::GetClassData() const { return &_class_data_; }

void ServiceGatewayUserPlane_Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGatewayUserPlane_Spec *>(to)->MergeFrom(
      static_cast<const ServiceGatewayUserPlane_Spec &>(from));
}


void ServiceGatewayUserPlane_Spec::MergeFrom(const ServiceGatewayUserPlane_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGatewayUserPlane.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_service_group_.MergeFrom(from.supported_service_group_);
  if (!from._internal_access_ip_address().empty()) {
    _internal_set_access_ip_address(from._internal_access_ip_address());
  }
  if (!from._internal_core_ip_address().empty()) {
    _internal_set_core_ip_address(from._internal_core_ip_address());
  }
  if (!from._internal_access_mac().empty()) {
    _internal_set_access_mac(from._internal_access_mac());
  }
  if (!from._internal_core_mac().empty()) {
    _internal_set_core_mac(from._internal_core_mac());
  }
  if (from._internal_max_session_count() != 0) {
    _internal_set_max_session_count(from._internal_max_session_count());
  }
  if (from._internal_maintenence() != 0) {
    _internal_set_maintenence(from._internal_maintenence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGatewayUserPlane_Spec::CopyFrom(const ServiceGatewayUserPlane_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGatewayUserPlane.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGatewayUserPlane_Spec::IsInitialized() const {
  return true;
}

void ServiceGatewayUserPlane_Spec::InternalSwap(ServiceGatewayUserPlane_Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supported_service_group_.InternalSwap(&other->supported_service_group_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &access_ip_address_, lhs_arena,
      &other->access_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &core_ip_address_, lhs_arena,
      &other->core_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &access_mac_, lhs_arena,
      &other->access_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &core_mac_, lhs_arena,
      &other->core_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlane_Spec, maintenence_)
      + sizeof(ServiceGatewayUserPlane_Spec::maintenence_)
      - PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlane_Spec, max_session_count_)>(
          reinterpret_cast<char*>(&max_session_count_),
          reinterpret_cast<char*>(&other->max_session_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGatewayUserPlane_Spec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[42]);
}

// ===================================================================

class ServiceGatewayUserPlane_Status::_Internal {
 public:
};

ServiceGatewayUserPlane_Status::ServiceGatewayUserPlane_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  network_connection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGatewayUserPlane.Status)
}
ServiceGatewayUserPlane_Status::ServiceGatewayUserPlane_Status(const ServiceGatewayUserPlane_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      network_connection_(from.network_connection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allocated_session_count_ = from.allocated_session_count_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGatewayUserPlane.Status)
}

inline void ServiceGatewayUserPlane_Status::SharedCtor() {
allocated_session_count_ = 0;
}

ServiceGatewayUserPlane_Status::~ServiceGatewayUserPlane_Status() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGatewayUserPlane.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGatewayUserPlane_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServiceGatewayUserPlane_Status::ArenaDtor(void* object) {
  ServiceGatewayUserPlane_Status* _this = reinterpret_cast< ServiceGatewayUserPlane_Status* >(object);
  (void)_this;
}
void ServiceGatewayUserPlane_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGatewayUserPlane_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGatewayUserPlane_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGatewayUserPlane.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_connection_.Clear();
  allocated_session_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGatewayUserPlane_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 allocated_session_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          allocated_session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 network_connection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_network_connection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_network_connection(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGatewayUserPlane_Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGatewayUserPlane.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 allocated_session_count = 1;
  if (this->_internal_allocated_session_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_allocated_session_count(), target);
  }

  // repeated int32 network_connection = 2;
  {
    int byte_size = _network_connection_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_network_connection(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGatewayUserPlane.Status)
  return target;
}

size_t ServiceGatewayUserPlane_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGatewayUserPlane.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 network_connection = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->network_connection_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _network_connection_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 allocated_session_count = 1;
  if (this->_internal_allocated_session_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_allocated_session_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGatewayUserPlane_Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGatewayUserPlane_Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGatewayUserPlane_Status::GetClassData() const { return &_class_data_; }

void ServiceGatewayUserPlane_Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGatewayUserPlane_Status *>(to)->MergeFrom(
      static_cast<const ServiceGatewayUserPlane_Status &>(from));
}


void ServiceGatewayUserPlane_Status::MergeFrom(const ServiceGatewayUserPlane_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGatewayUserPlane.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  network_connection_.MergeFrom(from.network_connection_);
  if (from._internal_allocated_session_count() != 0) {
    _internal_set_allocated_session_count(from._internal_allocated_session_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGatewayUserPlane_Status::CopyFrom(const ServiceGatewayUserPlane_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGatewayUserPlane.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGatewayUserPlane_Status::IsInitialized() const {
  return true;
}

void ServiceGatewayUserPlane_Status::InternalSwap(ServiceGatewayUserPlane_Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  network_connection_.InternalSwap(&other->network_connection_);
  swap(allocated_session_count_, other->allocated_session_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGatewayUserPlane_Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[43]);
}

// ===================================================================

class ServiceGatewayUserPlane::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const ServiceGatewayUserPlane* msg);
  static const ::bbf::sss::ServiceGatewayUserPlane_Spec& spec(const ServiceGatewayUserPlane* msg);
  static const ::bbf::sss::ServiceGatewayUserPlane_Status& status(const ServiceGatewayUserPlane* msg);
};

const ::bbf::sss::MetaData&
ServiceGatewayUserPlane::_Internal::metadata(const ServiceGatewayUserPlane* msg) {
  return *msg->metadata_;
}
const ::bbf::sss::ServiceGatewayUserPlane_Spec&
ServiceGatewayUserPlane::_Internal::spec(const ServiceGatewayUserPlane* msg) {
  return *msg->spec_;
}
const ::bbf::sss::ServiceGatewayUserPlane_Status&
ServiceGatewayUserPlane::_Internal::status(const ServiceGatewayUserPlane* msg) {
  return *msg->status_;
}
ServiceGatewayUserPlane::ServiceGatewayUserPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGatewayUserPlane)
}
ServiceGatewayUserPlane::ServiceGatewayUserPlane(const ServiceGatewayUserPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  service_gateway_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_gateway_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_gateway_id().empty()) {
    service_gateway_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_gateway_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::ServiceGatewayUserPlane_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bbf::sss::ServiceGatewayUserPlane_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGatewayUserPlane)
}

inline void ServiceGatewayUserPlane::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
service_gateway_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_gateway_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

ServiceGatewayUserPlane::~ServiceGatewayUserPlane() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGatewayUserPlane)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGatewayUserPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_gateway_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void ServiceGatewayUserPlane::ArenaDtor(void* object) {
  ServiceGatewayUserPlane* _this = reinterpret_cast< ServiceGatewayUserPlane* >(object);
  (void)_this;
}
void ServiceGatewayUserPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGatewayUserPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGatewayUserPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGatewayUserPlane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  service_gateway_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGatewayUserPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_gateway_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_gateway_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGatewayUserPlane.service_gateway_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGatewayUserPlane.Spec spec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.ServiceGatewayUserPlane.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGatewayUserPlane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGatewayUserPlane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string service_gateway_id = 2;
  if (!this->_internal_service_gateway_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_gateway_id().data(), static_cast<int>(this->_internal_service_gateway_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGatewayUserPlane.service_gateway_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_gateway_id(), target);
  }

  // .bbf.sss.MetaData metadata = 3;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  // .bbf.sss.ServiceGatewayUserPlane.Spec spec = 4;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spec(this), target, stream);
  }

  // .bbf.sss.ServiceGatewayUserPlane.Status status = 5;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGatewayUserPlane)
  return target;
}

size_t ServiceGatewayUserPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGatewayUserPlane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string service_gateway_id = 2;
  if (!this->_internal_service_gateway_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_gateway_id());
  }

  // .bbf.sss.MetaData metadata = 3;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .bbf.sss.ServiceGatewayUserPlane.Spec spec = 4;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .bbf.sss.ServiceGatewayUserPlane.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGatewayUserPlane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGatewayUserPlane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGatewayUserPlane::GetClassData() const { return &_class_data_; }

void ServiceGatewayUserPlane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGatewayUserPlane *>(to)->MergeFrom(
      static_cast<const ServiceGatewayUserPlane &>(from));
}


void ServiceGatewayUserPlane::MergeFrom(const ServiceGatewayUserPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGatewayUserPlane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_service_gateway_id().empty()) {
    _internal_set_service_gateway_id(from._internal_service_gateway_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::ServiceGatewayUserPlane_Spec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::bbf::sss::ServiceGatewayUserPlane_Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGatewayUserPlane::CopyFrom(const ServiceGatewayUserPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGatewayUserPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGatewayUserPlane::IsInitialized() const {
  return true;
}

void ServiceGatewayUserPlane::InternalSwap(ServiceGatewayUserPlane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_gateway_id_, lhs_arena,
      &other->service_gateway_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlane, status_)
      + sizeof(ServiceGatewayUserPlane::status_)
      - PROTOBUF_FIELD_OFFSET(ServiceGatewayUserPlane, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGatewayUserPlane::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[44]);
}

// ===================================================================

class Shard_Spec::_Internal {
 public:
};

Shard_Spec::Shard_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  desired_network_connection_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.Shard.Spec)
}
Shard_Spec::Shard_Spec(const Shard_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      desired_network_connection_(from.desired_network_connection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desired_service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desired_service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desired_service_gateway_user_plane().empty()) {
    desired_service_gateway_user_plane_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desired_service_gateway_user_plane(), 
      GetArenaForAllocation());
  }
  required_qos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    required_qos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_required_qos().empty()) {
    required_qos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_qos(), 
      GetArenaForAllocation());
  }
  max_session_count_ = from.max_session_count_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.Shard.Spec)
}

inline void Shard_Spec::SharedCtor() {
desired_service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desired_service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
required_qos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  required_qos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_session_count_ = 0;
}

Shard_Spec::~Shard_Spec() {
  // @@protoc_insertion_point(destructor:bbf.sss.Shard.Spec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Shard_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desired_service_gateway_user_plane_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_qos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Shard_Spec::ArenaDtor(void* object) {
  Shard_Spec* _this = reinterpret_cast< Shard_Spec* >(object);
  (void)_this;
}
void Shard_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shard_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Shard_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.Shard.Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desired_network_connection_.Clear();
  desired_service_gateway_user_plane_.ClearToEmpty();
  required_qos_.ClearToEmpty();
  max_session_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shard_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_session_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desired_service_gateway_user_plane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desired_service_gateway_user_plane();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.Spec.desired_service_gateway_user_plane"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string desired_network_connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_desired_network_connection();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.Spec.desired_network_connection"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string required_qos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_required_qos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.Spec.required_qos"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shard_Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.Shard.Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_session_count = 1;
  if (this->_internal_max_session_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_session_count(), target);
  }

  // string desired_service_gateway_user_plane = 2;
  if (!this->_internal_desired_service_gateway_user_plane().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desired_service_gateway_user_plane().data(), static_cast<int>(this->_internal_desired_service_gateway_user_plane().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.Spec.desired_service_gateway_user_plane");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desired_service_gateway_user_plane(), target);
  }

  // repeated string desired_network_connection = 3;
  for (int i = 0, n = this->_internal_desired_network_connection_size(); i < n; i++) {
    const auto& s = this->_internal_desired_network_connection(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.Spec.desired_network_connection");
    target = stream->WriteString(3, s, target);
  }

  // string required_qos = 4;
  if (!this->_internal_required_qos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_required_qos().data(), static_cast<int>(this->_internal_required_qos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.Spec.required_qos");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_required_qos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.Shard.Spec)
  return target;
}

size_t Shard_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.Shard.Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string desired_network_connection = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(desired_network_connection_.size());
  for (int i = 0, n = desired_network_connection_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      desired_network_connection_.Get(i));
  }

  // string desired_service_gateway_user_plane = 2;
  if (!this->_internal_desired_service_gateway_user_plane().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desired_service_gateway_user_plane());
  }

  // string required_qos = 4;
  if (!this->_internal_required_qos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_qos());
  }

  // int32 max_session_count = 1;
  if (this->_internal_max_session_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_session_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shard_Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shard_Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shard_Spec::GetClassData() const { return &_class_data_; }

void Shard_Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shard_Spec *>(to)->MergeFrom(
      static_cast<const Shard_Spec &>(from));
}


void Shard_Spec::MergeFrom(const Shard_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.Shard.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  desired_network_connection_.MergeFrom(from.desired_network_connection_);
  if (!from._internal_desired_service_gateway_user_plane().empty()) {
    _internal_set_desired_service_gateway_user_plane(from._internal_desired_service_gateway_user_plane());
  }
  if (!from._internal_required_qos().empty()) {
    _internal_set_required_qos(from._internal_required_qos());
  }
  if (from._internal_max_session_count() != 0) {
    _internal_set_max_session_count(from._internal_max_session_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shard_Spec::CopyFrom(const Shard_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.Shard.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard_Spec::IsInitialized() const {
  return true;
}

void Shard_Spec::InternalSwap(Shard_Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  desired_network_connection_.InternalSwap(&other->desired_network_connection_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desired_service_gateway_user_plane_, lhs_arena,
      &other->desired_service_gateway_user_plane_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_qos_, lhs_arena,
      &other->required_qos_, rhs_arena
  );
  swap(max_session_count_, other->max_session_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shard_Spec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[45]);
}

// ===================================================================

Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Shard_Status_TsfNetworkConnectionEntry_DoNotUse() {}
Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Shard_Status_TsfNetworkConnectionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Shard_Status_TsfNetworkConnectionEntry_DoNotUse::MergeFrom(const Shard_Status_TsfNetworkConnectionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Shard_Status_TsfNetworkConnectionEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[46]);
}

// ===================================================================

class Shard_Status::_Internal {
 public:
};

Shard_Status::Shard_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tsf_network_connection_(arena),
  ip_prefixes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.Shard.Status)
}
Shard_Status::Shard_Status(const Shard_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_prefixes_(from.ip_prefixes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tsf_network_connection_.MergeFrom(from.tsf_network_connection_);
  current_service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_service_gateway_user_plane().empty()) {
    current_service_gateway_user_plane_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_service_gateway_user_plane(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.Shard.Status)
}

inline void Shard_Status::SharedCtor() {
current_service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Shard_Status::~Shard_Status() {
  // @@protoc_insertion_point(destructor:bbf.sss.Shard.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Shard_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_service_gateway_user_plane_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Shard_Status::ArenaDtor(void* object) {
  Shard_Status* _this = reinterpret_cast< Shard_Status* >(object);
  (void)_this;
  _this->tsf_network_connection_. ~MapField();
}
inline void Shard_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Shard_Status::ArenaDtor);
  }
}
void Shard_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Shard_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.Shard.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tsf_network_connection_.Clear();
  ip_prefixes_.Clear();
  current_service_gateway_user_plane_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shard_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_service_gateway_user_plane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_current_service_gateway_user_plane();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.Status.current_service_gateway_user_plane"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> tsf_network_connection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tsf_network_connection_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ip_prefixes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_prefixes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.Status.ip_prefixes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shard_Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.Shard.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_service_gateway_user_plane = 1;
  if (!this->_internal_current_service_gateway_user_plane().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_service_gateway_user_plane().data(), static_cast<int>(this->_internal_current_service_gateway_user_plane().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.Status.current_service_gateway_user_plane");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_service_gateway_user_plane(), target);
  }

  // map<string, string> tsf_network_connection = 2;
  if (!this->_internal_tsf_network_connection().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bbf.sss.Shard.Status.TsfNetworkConnectionEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bbf.sss.Shard.Status.TsfNetworkConnectionEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tsf_network_connection().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tsf_network_connection().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tsf_network_connection().begin();
          it != this->_internal_tsf_network_connection().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tsf_network_connection().begin();
          it != this->_internal_tsf_network_connection().end(); ++it) {
        target = Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string ip_prefixes = 3;
  for (int i = 0, n = this->_internal_ip_prefixes_size(); i < n; i++) {
    const auto& s = this->_internal_ip_prefixes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.Status.ip_prefixes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.Shard.Status)
  return target;
}

size_t Shard_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.Shard.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tsf_network_connection = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tsf_network_connection_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tsf_network_connection().begin();
      it != this->_internal_tsf_network_connection().end(); ++it) {
    total_size += Shard_Status_TsfNetworkConnectionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string ip_prefixes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_prefixes_.size());
  for (int i = 0, n = ip_prefixes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_prefixes_.Get(i));
  }

  // string current_service_gateway_user_plane = 1;
  if (!this->_internal_current_service_gateway_user_plane().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_service_gateway_user_plane());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shard_Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shard_Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shard_Status::GetClassData() const { return &_class_data_; }

void Shard_Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shard_Status *>(to)->MergeFrom(
      static_cast<const Shard_Status &>(from));
}


void Shard_Status::MergeFrom(const Shard_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.Shard.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tsf_network_connection_.MergeFrom(from.tsf_network_connection_);
  ip_prefixes_.MergeFrom(from.ip_prefixes_);
  if (!from._internal_current_service_gateway_user_plane().empty()) {
    _internal_set_current_service_gateway_user_plane(from._internal_current_service_gateway_user_plane());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shard_Status::CopyFrom(const Shard_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.Shard.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard_Status::IsInitialized() const {
  return true;
}

void Shard_Status::InternalSwap(Shard_Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tsf_network_connection_.InternalSwap(&other->tsf_network_connection_);
  ip_prefixes_.InternalSwap(&other->ip_prefixes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_service_gateway_user_plane_, lhs_arena,
      &other->current_service_gateway_user_plane_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Shard_Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[47]);
}

// ===================================================================

class Shard::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const Shard* msg);
  static const ::bbf::sss::Shard_Spec& spec(const Shard* msg);
  static const ::bbf::sss::Shard_Status& status(const Shard* msg);
};

const ::bbf::sss::MetaData&
Shard::_Internal::metadata(const Shard* msg) {
  return *msg->metadata_;
}
const ::bbf::sss::Shard_Spec&
Shard::_Internal::spec(const Shard* msg) {
  return *msg->spec_;
}
const ::bbf::sss::Shard_Status&
Shard::_Internal::status(const Shard* msg) {
  return *msg->status_;
}
Shard::Shard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.Shard)
}
Shard::Shard(const Shard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::Shard_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bbf::sss::Shard_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.Shard)
}

inline void Shard::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

Shard::~Shard() {
  // @@protoc_insertion_point(destructor:bbf.sss.Shard)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Shard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Shard::ArenaDtor(void* object) {
  Shard* _this = reinterpret_cast< Shard* >(object);
  (void)_this;
}
void Shard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Shard::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.Shard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.Shard.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.Shard.Spec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.Shard.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.Shard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.Shard.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .bbf.sss.Shard.Spec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .bbf.sss.Shard.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.Shard)
  return target;
}

size_t Shard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.Shard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .bbf.sss.Shard.Spec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .bbf.sss.Shard.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shard::GetClassData() const { return &_class_data_; }

void Shard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shard *>(to)->MergeFrom(
      static_cast<const Shard &>(from));
}


void Shard::MergeFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::Shard_Spec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::bbf::sss::Shard_Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shard::CopyFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard::IsInitialized() const {
  return true;
}

void Shard::InternalSwap(Shard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shard, status_)
      + sizeof(Shard::status_)
      - PROTOBUF_FIELD_OFFSET(Shard, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shard::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[48]);
}

// ===================================================================

class TrafficSteeringFunction_Spec::_Internal {
 public:
};

TrafficSteeringFunction_Spec::TrafficSteeringFunction_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.TrafficSteeringFunction.Spec)
}
TrafficSteeringFunction_Spec::TrafficSteeringFunction_Spec(const TrafficSteeringFunction_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.TrafficSteeringFunction.Spec)
}

inline void TrafficSteeringFunction_Spec::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSteeringFunction_Spec::~TrafficSteeringFunction_Spec() {
  // @@protoc_insertion_point(destructor:bbf.sss.TrafficSteeringFunction.Spec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSteeringFunction_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSteeringFunction_Spec::ArenaDtor(void* object) {
  TrafficSteeringFunction_Spec* _this = reinterpret_cast< TrafficSteeringFunction_Spec* >(object);
  (void)_this;
}
void TrafficSteeringFunction_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSteeringFunction_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSteeringFunction_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.TrafficSteeringFunction.Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  mac_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSteeringFunction_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 9901;
      case 9901:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.TrafficSteeringFunction.Spec.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mac = 9903;
      case 9903:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.TrafficSteeringFunction.Spec.mac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSteeringFunction_Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.TrafficSteeringFunction.Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 9901;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.TrafficSteeringFunction.Spec.ip_address");
    target = stream->WriteStringMaybeAliased(
        9901, this->_internal_ip_address(), target);
  }

  // string mac = 9903;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.TrafficSteeringFunction.Spec.mac");
    target = stream->WriteStringMaybeAliased(
        9903, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.TrafficSteeringFunction.Spec)
  return target;
}

size_t TrafficSteeringFunction_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.TrafficSteeringFunction.Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 9901;
  if (!this->_internal_ip_address().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string mac = 9903;
  if (!this->_internal_mac().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSteeringFunction_Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSteeringFunction_Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSteeringFunction_Spec::GetClassData() const { return &_class_data_; }

void TrafficSteeringFunction_Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSteeringFunction_Spec *>(to)->MergeFrom(
      static_cast<const TrafficSteeringFunction_Spec &>(from));
}


void TrafficSteeringFunction_Spec::MergeFrom(const TrafficSteeringFunction_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.TrafficSteeringFunction.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_mac().empty()) {
    _internal_set_mac(from._internal_mac());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSteeringFunction_Spec::CopyFrom(const TrafficSteeringFunction_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.TrafficSteeringFunction.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSteeringFunction_Spec::IsInitialized() const {
  return true;
}

void TrafficSteeringFunction_Spec::InternalSwap(TrafficSteeringFunction_Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_, lhs_arena,
      &other->mac_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSteeringFunction_Spec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[49]);
}

// ===================================================================

class TrafficSteeringFunction::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const TrafficSteeringFunction* msg);
  static const ::bbf::sss::TrafficSteeringFunction_Spec& spec(const TrafficSteeringFunction* msg);
};

const ::bbf::sss::MetaData&
TrafficSteeringFunction::_Internal::metadata(const TrafficSteeringFunction* msg) {
  return *msg->metadata_;
}
const ::bbf::sss::TrafficSteeringFunction_Spec&
TrafficSteeringFunction::_Internal::spec(const TrafficSteeringFunction* msg) {
  return *msg->spec_;
}
TrafficSteeringFunction::TrafficSteeringFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.TrafficSteeringFunction)
}
TrafficSteeringFunction::TrafficSteeringFunction(const TrafficSteeringFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::TrafficSteeringFunction_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.TrafficSteeringFunction)
}

inline void TrafficSteeringFunction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(spec_));
}

TrafficSteeringFunction::~TrafficSteeringFunction() {
  // @@protoc_insertion_point(destructor:bbf.sss.TrafficSteeringFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficSteeringFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
}

void TrafficSteeringFunction::ArenaDtor(void* object) {
  TrafficSteeringFunction* _this = reinterpret_cast< TrafficSteeringFunction* >(object);
  (void)_this;
}
void TrafficSteeringFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSteeringFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficSteeringFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.TrafficSteeringFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSteeringFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.TrafficSteeringFunction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.TrafficSteeringFunction.Spec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSteeringFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.TrafficSteeringFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.TrafficSteeringFunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .bbf.sss.TrafficSteeringFunction.Spec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.TrafficSteeringFunction)
  return target;
}

size_t TrafficSteeringFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.TrafficSteeringFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .bbf.sss.TrafficSteeringFunction.Spec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSteeringFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficSteeringFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSteeringFunction::GetClassData() const { return &_class_data_; }

void TrafficSteeringFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficSteeringFunction *>(to)->MergeFrom(
      static_cast<const TrafficSteeringFunction &>(from));
}


void TrafficSteeringFunction::MergeFrom(const TrafficSteeringFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.TrafficSteeringFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::TrafficSteeringFunction_Spec::MergeFrom(from._internal_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSteeringFunction::CopyFrom(const TrafficSteeringFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.TrafficSteeringFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSteeringFunction::IsInitialized() const {
  return true;
}

void TrafficSteeringFunction::InternalSwap(TrafficSteeringFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSteeringFunction, spec_)
      + sizeof(TrafficSteeringFunction::spec_)
      - PROTOBUF_FIELD_OFFSET(TrafficSteeringFunction, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSteeringFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[50]);
}

// ===================================================================

class ServiceGateway::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const ServiceGateway* msg);
};

const ::bbf::sss::MetaData&
ServiceGateway::_Internal::metadata(const ServiceGateway* msg) {
  return *msg->metadata_;
}
ServiceGateway::ServiceGateway(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.ServiceGateway)
}
ServiceGateway::ServiceGateway(const ServiceGateway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.ServiceGateway)
}

inline void ServiceGateway::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

ServiceGateway::~ServiceGateway() {
  // @@protoc_insertion_point(destructor:bbf.sss.ServiceGateway)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceGateway::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void ServiceGateway::ArenaDtor(void* object) {
  ServiceGateway* _this = reinterpret_cast< ServiceGateway* >(object);
  (void)_this;
}
void ServiceGateway::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceGateway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceGateway::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.ServiceGateway)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceGateway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.ServiceGateway.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceGateway::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.ServiceGateway)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.ServiceGateway.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.ServiceGateway)
  return target;
}

size_t ServiceGateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.ServiceGateway)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceGateway::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceGateway::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceGateway::GetClassData() const { return &_class_data_; }

void ServiceGateway::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceGateway *>(to)->MergeFrom(
      static_cast<const ServiceGateway &>(from));
}


void ServiceGateway::MergeFrom(const ServiceGateway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.ServiceGateway)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceGateway::CopyFrom(const ServiceGateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.ServiceGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceGateway::IsInitialized() const {
  return true;
}

void ServiceGateway::InternalSwap(ServiceGateway* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceGateway::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[51]);
}

// ===================================================================

class NetworkConnection_Spec::_Internal {
 public:
  static const ::bbf::sss::VxlanConnection& vxlan(const NetworkConnection_Spec* msg);
};

const ::bbf::sss::VxlanConnection&
NetworkConnection_Spec::_Internal::vxlan(const NetworkConnection_Spec* msg) {
  return *msg->transport_.vxlan_;
}
void NetworkConnection_Spec::set_allocated_vxlan(::bbf::sss::VxlanConnection* vxlan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transport();
  if (vxlan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bbf::sss::VxlanConnection>::GetOwningArena(vxlan);
    if (message_arena != submessage_arena) {
      vxlan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vxlan, submessage_arena);
    }
    set_has_vxlan();
    transport_.vxlan_ = vxlan;
  }
  // @@protoc_insertion_point(field_set_allocated:bbf.sss.NetworkConnection.Spec.vxlan)
}
NetworkConnection_Spec::NetworkConnection_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.NetworkConnection.Spec)
}
NetworkConnection_Spec::NetworkConnection_Spec(const NetworkConnection_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  traffic_steering_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    traffic_steering_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traffic_steering_function().empty()) {
    traffic_steering_function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_traffic_steering_function(), 
      GetArenaForAllocation());
  }
  service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_gateway_user_plane().empty()) {
    service_gateway_user_plane_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_gateway_user_plane(), 
      GetArenaForAllocation());
  }
  clear_has_transport();
  switch (from.transport_case()) {
    case kVxlan: {
      _internal_mutable_vxlan()->::bbf::sss::VxlanConnection::MergeFrom(from._internal_vxlan());
      break;
    }
    case TRANSPORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.NetworkConnection.Spec)
}

inline void NetworkConnection_Spec::SharedCtor() {
traffic_steering_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  traffic_steering_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
service_gateway_user_plane_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_gateway_user_plane_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_transport();
}

NetworkConnection_Spec::~NetworkConnection_Spec() {
  // @@protoc_insertion_point(destructor:bbf.sss.NetworkConnection.Spec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkConnection_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  traffic_steering_function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_gateway_user_plane_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_transport()) {
    clear_transport();
  }
}

void NetworkConnection_Spec::ArenaDtor(void* object) {
  NetworkConnection_Spec* _this = reinterpret_cast< NetworkConnection_Spec* >(object);
  (void)_this;
}
void NetworkConnection_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConnection_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConnection_Spec::clear_transport() {
// @@protoc_insertion_point(one_of_clear_start:bbf.sss.NetworkConnection.Spec)
  switch (transport_case()) {
    case kVxlan: {
      if (GetArenaForAllocation() == nullptr) {
        delete transport_.vxlan_;
      }
      break;
    }
    case TRANSPORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSPORT_NOT_SET;
}


void NetworkConnection_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.NetworkConnection.Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_steering_function_.ClearToEmpty();
  service_gateway_user_plane_.ClearToEmpty();
  clear_transport();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConnection_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string traffic_steering_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_traffic_steering_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.NetworkConnection.Spec.traffic_steering_function"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_gateway_user_plane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_gateway_user_plane();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.NetworkConnection.Spec.service_gateway_user_plane"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.VxlanConnection vxlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vxlan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkConnection_Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.NetworkConnection.Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string traffic_steering_function = 1;
  if (!this->_internal_traffic_steering_function().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traffic_steering_function().data(), static_cast<int>(this->_internal_traffic_steering_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.NetworkConnection.Spec.traffic_steering_function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_traffic_steering_function(), target);
  }

  // string service_gateway_user_plane = 2;
  if (!this->_internal_service_gateway_user_plane().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_gateway_user_plane().data(), static_cast<int>(this->_internal_service_gateway_user_plane().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.NetworkConnection.Spec.service_gateway_user_plane");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_gateway_user_plane(), target);
  }

  // .bbf.sss.VxlanConnection vxlan = 3;
  if (_internal_has_vxlan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vxlan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.NetworkConnection.Spec)
  return target;
}

size_t NetworkConnection_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.NetworkConnection.Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string traffic_steering_function = 1;
  if (!this->_internal_traffic_steering_function().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traffic_steering_function());
  }

  // string service_gateway_user_plane = 2;
  if (!this->_internal_service_gateway_user_plane().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_gateway_user_plane());
  }

  switch (transport_case()) {
    // .bbf.sss.VxlanConnection vxlan = 3;
    case kVxlan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transport_.vxlan_);
      break;
    }
    case TRANSPORT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkConnection_Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkConnection_Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkConnection_Spec::GetClassData() const { return &_class_data_; }

void NetworkConnection_Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkConnection_Spec *>(to)->MergeFrom(
      static_cast<const NetworkConnection_Spec &>(from));
}


void NetworkConnection_Spec::MergeFrom(const NetworkConnection_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.NetworkConnection.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_traffic_steering_function().empty()) {
    _internal_set_traffic_steering_function(from._internal_traffic_steering_function());
  }
  if (!from._internal_service_gateway_user_plane().empty()) {
    _internal_set_service_gateway_user_plane(from._internal_service_gateway_user_plane());
  }
  switch (from.transport_case()) {
    case kVxlan: {
      _internal_mutable_vxlan()->::bbf::sss::VxlanConnection::MergeFrom(from._internal_vxlan());
      break;
    }
    case TRANSPORT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkConnection_Spec::CopyFrom(const NetworkConnection_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.NetworkConnection.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnection_Spec::IsInitialized() const {
  return true;
}

void NetworkConnection_Spec::InternalSwap(NetworkConnection_Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &traffic_steering_function_, lhs_arena,
      &other->traffic_steering_function_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_gateway_user_plane_, lhs_arena,
      &other->service_gateway_user_plane_, rhs_arena
  );
  swap(transport_, other->transport_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnection_Spec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[52]);
}

// ===================================================================

class NetworkConnection_Status::_Internal {
 public:
};

NetworkConnection_Status::NetworkConnection_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.NetworkConnection.Status)
}
NetworkConnection_Status::NetworkConnection_Status(const NetworkConnection_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nc_traffic_steering_function_status_, &from.nc_traffic_steering_function_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&nc_service_gateway_user_plane_status_) -
    reinterpret_cast<char*>(&nc_traffic_steering_function_status_)) + sizeof(nc_service_gateway_user_plane_status_));
  // @@protoc_insertion_point(copy_constructor:bbf.sss.NetworkConnection.Status)
}

inline void NetworkConnection_Status::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nc_traffic_steering_function_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nc_service_gateway_user_plane_status_) -
    reinterpret_cast<char*>(&nc_traffic_steering_function_status_)) + sizeof(nc_service_gateway_user_plane_status_));
}

NetworkConnection_Status::~NetworkConnection_Status() {
  // @@protoc_insertion_point(destructor:bbf.sss.NetworkConnection.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkConnection_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkConnection_Status::ArenaDtor(void* object) {
  NetworkConnection_Status* _this = reinterpret_cast< NetworkConnection_Status* >(object);
  (void)_this;
}
void NetworkConnection_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConnection_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConnection_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.NetworkConnection.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nc_traffic_steering_function_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nc_service_gateway_user_plane_status_) -
      reinterpret_cast<char*>(&nc_traffic_steering_function_status_)) + sizeof(nc_service_gateway_user_plane_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConnection_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_traffic_steering_function_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nc_traffic_steering_function_status(static_cast<::bbf::sss::NetworkConnection_Status_NcEndpointStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_service_gateway_user_plane_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nc_service_gateway_user_plane_status(static_cast<::bbf::sss::NetworkConnection_Status_NcEndpointStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkConnection_Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.NetworkConnection.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_traffic_steering_function_status = 1;
  if (this->_internal_nc_traffic_steering_function_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_nc_traffic_steering_function_status(), target);
  }

  // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_service_gateway_user_plane_status = 2;
  if (this->_internal_nc_service_gateway_user_plane_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nc_service_gateway_user_plane_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.NetworkConnection.Status)
  return target;
}

size_t NetworkConnection_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.NetworkConnection.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_traffic_steering_function_status = 1;
  if (this->_internal_nc_traffic_steering_function_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nc_traffic_steering_function_status());
  }

  // .bbf.sss.NetworkConnection.Status.NcEndpointStatus nc_service_gateway_user_plane_status = 2;
  if (this->_internal_nc_service_gateway_user_plane_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nc_service_gateway_user_plane_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkConnection_Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkConnection_Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkConnection_Status::GetClassData() const { return &_class_data_; }

void NetworkConnection_Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkConnection_Status *>(to)->MergeFrom(
      static_cast<const NetworkConnection_Status &>(from));
}


void NetworkConnection_Status::MergeFrom(const NetworkConnection_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.NetworkConnection.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nc_traffic_steering_function_status() != 0) {
    _internal_set_nc_traffic_steering_function_status(from._internal_nc_traffic_steering_function_status());
  }
  if (from._internal_nc_service_gateway_user_plane_status() != 0) {
    _internal_set_nc_service_gateway_user_plane_status(from._internal_nc_service_gateway_user_plane_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkConnection_Status::CopyFrom(const NetworkConnection_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.NetworkConnection.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnection_Status::IsInitialized() const {
  return true;
}

void NetworkConnection_Status::InternalSwap(NetworkConnection_Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkConnection_Status, nc_service_gateway_user_plane_status_)
      + sizeof(NetworkConnection_Status::nc_service_gateway_user_plane_status_)
      - PROTOBUF_FIELD_OFFSET(NetworkConnection_Status, nc_traffic_steering_function_status_)>(
          reinterpret_cast<char*>(&nc_traffic_steering_function_status_),
          reinterpret_cast<char*>(&other->nc_traffic_steering_function_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnection_Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[53]);
}

// ===================================================================

class NetworkConnection::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const NetworkConnection* msg);
  static const ::bbf::sss::NetworkConnection_Spec& spec(const NetworkConnection* msg);
  static const ::bbf::sss::NetworkConnection_Status& status(const NetworkConnection* msg);
};

const ::bbf::sss::MetaData&
NetworkConnection::_Internal::metadata(const NetworkConnection* msg) {
  return *msg->metadata_;
}
const ::bbf::sss::NetworkConnection_Spec&
NetworkConnection::_Internal::spec(const NetworkConnection* msg) {
  return *msg->spec_;
}
const ::bbf::sss::NetworkConnection_Status&
NetworkConnection::_Internal::status(const NetworkConnection* msg) {
  return *msg->status_;
}
NetworkConnection::NetworkConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.NetworkConnection)
}
NetworkConnection::NetworkConnection(const NetworkConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::NetworkConnection_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bbf::sss::NetworkConnection_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.NetworkConnection)
}

inline void NetworkConnection::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

NetworkConnection::~NetworkConnection() {
  // @@protoc_insertion_point(destructor:bbf.sss.NetworkConnection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void NetworkConnection::ArenaDtor(void* object) {
  NetworkConnection* _this = reinterpret_cast< NetworkConnection* >(object);
  (void)_this;
}
void NetworkConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.NetworkConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.NetworkConnection.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.NetworkConnection.Spec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.NetworkConnection.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.NetworkConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.NetworkConnection.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .bbf.sss.NetworkConnection.Spec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .bbf.sss.NetworkConnection.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.NetworkConnection)
  return target;
}

size_t NetworkConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.NetworkConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .bbf.sss.NetworkConnection.Spec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .bbf.sss.NetworkConnection.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkConnection::GetClassData() const { return &_class_data_; }

void NetworkConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkConnection *>(to)->MergeFrom(
      static_cast<const NetworkConnection &>(from));
}


void NetworkConnection::MergeFrom(const NetworkConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.NetworkConnection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::NetworkConnection_Spec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::bbf::sss::NetworkConnection_Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkConnection::CopyFrom(const NetworkConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.NetworkConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnection::IsInitialized() const {
  return true;
}

void NetworkConnection::InternalSwap(NetworkConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkConnection, status_)
      + sizeof(NetworkConnection::status_)
      - PROTOBUF_FIELD_OFFSET(NetworkConnection, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[54]);
}

// ===================================================================

class VxlanConnection_Vtep::_Internal {
 public:
};

VxlanConnection_Vtep::VxlanConnection_Vtep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.VxlanConnection.Vtep)
}
VxlanConnection_Vtep::VxlanConnection_Vtep(const VxlanConnection_Vtep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  udp_port_ = from.udp_port_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.VxlanConnection.Vtep)
}

inline void VxlanConnection_Vtep::SharedCtor() {
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
udp_port_ = 0;
}

VxlanConnection_Vtep::~VxlanConnection_Vtep() {
  // @@protoc_insertion_point(destructor:bbf.sss.VxlanConnection.Vtep)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VxlanConnection_Vtep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VxlanConnection_Vtep::ArenaDtor(void* object) {
  VxlanConnection_Vtep* _this = reinterpret_cast< VxlanConnection_Vtep* >(object);
  (void)_this;
}
void VxlanConnection_Vtep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VxlanConnection_Vtep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VxlanConnection_Vtep::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.VxlanConnection.Vtep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmpty();
  mac_address_.ClearToEmpty();
  udp_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VxlanConnection_Vtep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.VxlanConnection.Vtep.ip_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 udp_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mac_address = 9903;
      case 9903:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.VxlanConnection.Vtep.mac_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VxlanConnection_Vtep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.VxlanConnection.Vtep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.VxlanConnection.Vtep.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_udp_port(), target);
  }

  // string mac_address = 9903;
  if (!this->_internal_mac_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.VxlanConnection.Vtep.mac_address");
    target = stream->WriteStringMaybeAliased(
        9903, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.VxlanConnection.Vtep)
  return target;
}

size_t VxlanConnection_Vtep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.VxlanConnection.Vtep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string mac_address = 9903;
  if (!this->_internal_mac_address().empty()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // int32 udp_port = 2;
  if (this->_internal_udp_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_udp_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VxlanConnection_Vtep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VxlanConnection_Vtep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VxlanConnection_Vtep::GetClassData() const { return &_class_data_; }

void VxlanConnection_Vtep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VxlanConnection_Vtep *>(to)->MergeFrom(
      static_cast<const VxlanConnection_Vtep &>(from));
}


void VxlanConnection_Vtep::MergeFrom(const VxlanConnection_Vtep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.VxlanConnection.Vtep)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_udp_port() != 0) {
    _internal_set_udp_port(from._internal_udp_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VxlanConnection_Vtep::CopyFrom(const VxlanConnection_Vtep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.VxlanConnection.Vtep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VxlanConnection_Vtep::IsInitialized() const {
  return true;
}

void VxlanConnection_Vtep::InternalSwap(VxlanConnection_Vtep* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, lhs_arena,
      &other->ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  swap(udp_port_, other->udp_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VxlanConnection_Vtep::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[55]);
}

// ===================================================================

class VxlanConnection::_Internal {
 public:
  static const ::bbf::sss::VxlanConnection_Vtep& traffic_steering_function_vni(const VxlanConnection* msg);
  static const ::bbf::sss::VxlanConnection_Vtep& service_gateway_user_plane_vni(const VxlanConnection* msg);
};

const ::bbf::sss::VxlanConnection_Vtep&
VxlanConnection::_Internal::traffic_steering_function_vni(const VxlanConnection* msg) {
  return *msg->traffic_steering_function_vni_;
}
const ::bbf::sss::VxlanConnection_Vtep&
VxlanConnection::_Internal::service_gateway_user_plane_vni(const VxlanConnection* msg) {
  return *msg->service_gateway_user_plane_vni_;
}
VxlanConnection::VxlanConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.VxlanConnection)
}
VxlanConnection::VxlanConnection(const VxlanConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_steering_function_vni()) {
    traffic_steering_function_vni_ = new ::bbf::sss::VxlanConnection_Vtep(*from.traffic_steering_function_vni_);
  } else {
    traffic_steering_function_vni_ = nullptr;
  }
  if (from._internal_has_service_gateway_user_plane_vni()) {
    service_gateway_user_plane_vni_ = new ::bbf::sss::VxlanConnection_Vtep(*from.service_gateway_user_plane_vni_);
  } else {
    service_gateway_user_plane_vni_ = nullptr;
  }
  vni_ = from.vni_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.VxlanConnection)
}

inline void VxlanConnection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traffic_steering_function_vni_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vni_) -
    reinterpret_cast<char*>(&traffic_steering_function_vni_)) + sizeof(vni_));
}

VxlanConnection::~VxlanConnection() {
  // @@protoc_insertion_point(destructor:bbf.sss.VxlanConnection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VxlanConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete traffic_steering_function_vni_;
  if (this != internal_default_instance()) delete service_gateway_user_plane_vni_;
}

void VxlanConnection::ArenaDtor(void* object) {
  VxlanConnection* _this = reinterpret_cast< VxlanConnection* >(object);
  (void)_this;
}
void VxlanConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VxlanConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VxlanConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.VxlanConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && traffic_steering_function_vni_ != nullptr) {
    delete traffic_steering_function_vni_;
  }
  traffic_steering_function_vni_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_gateway_user_plane_vni_ != nullptr) {
    delete service_gateway_user_plane_vni_;
  }
  service_gateway_user_plane_vni_ = nullptr;
  vni_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VxlanConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bbf.sss.VxlanConnection.Vtep traffic_steering_function_vni = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_steering_function_vni(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.VxlanConnection.Vtep service_gateway_user_plane_vni = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_gateway_user_plane_vni(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vni = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          vni_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VxlanConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.VxlanConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bbf.sss.VxlanConnection.Vtep traffic_steering_function_vni = 1;
  if (this->_internal_has_traffic_steering_function_vni()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::traffic_steering_function_vni(this), target, stream);
  }

  // .bbf.sss.VxlanConnection.Vtep service_gateway_user_plane_vni = 2;
  if (this->_internal_has_service_gateway_user_plane_vni()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_gateway_user_plane_vni(this), target, stream);
  }

  // int32 vni = 3;
  if (this->_internal_vni() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vni(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.VxlanConnection)
  return target;
}

size_t VxlanConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.VxlanConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bbf.sss.VxlanConnection.Vtep traffic_steering_function_vni = 1;
  if (this->_internal_has_traffic_steering_function_vni()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_steering_function_vni_);
  }

  // .bbf.sss.VxlanConnection.Vtep service_gateway_user_plane_vni = 2;
  if (this->_internal_has_service_gateway_user_plane_vni()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_gateway_user_plane_vni_);
  }

  // int32 vni = 3;
  if (this->_internal_vni() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vni());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VxlanConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VxlanConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VxlanConnection::GetClassData() const { return &_class_data_; }

void VxlanConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VxlanConnection *>(to)->MergeFrom(
      static_cast<const VxlanConnection &>(from));
}


void VxlanConnection::MergeFrom(const VxlanConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.VxlanConnection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_traffic_steering_function_vni()) {
    _internal_mutable_traffic_steering_function_vni()->::bbf::sss::VxlanConnection_Vtep::MergeFrom(from._internal_traffic_steering_function_vni());
  }
  if (from._internal_has_service_gateway_user_plane_vni()) {
    _internal_mutable_service_gateway_user_plane_vni()->::bbf::sss::VxlanConnection_Vtep::MergeFrom(from._internal_service_gateway_user_plane_vni());
  }
  if (from._internal_vni() != 0) {
    _internal_set_vni(from._internal_vni());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VxlanConnection::CopyFrom(const VxlanConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.VxlanConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VxlanConnection::IsInitialized() const {
  return true;
}

void VxlanConnection::InternalSwap(VxlanConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VxlanConnection, vni_)
      + sizeof(VxlanConnection::vni_)
      - PROTOBUF_FIELD_OFFSET(VxlanConnection, traffic_steering_function_vni_)>(
          reinterpret_cast<char*>(&traffic_steering_function_vni_),
          reinterpret_cast<char*>(&other->traffic_steering_function_vni_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VxlanConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[56]);
}

// ===================================================================

class SessionContext_Spec::_Internal {
 public:
  static const ::bbf::sss::SessionFilter& session_filter(const SessionContext_Spec* msg);
};

const ::bbf::sss::SessionFilter&
SessionContext_Spec::_Internal::session_filter(const SessionContext_Spec* msg) {
  return *msg->session_filter_;
}
SessionContext_Spec::SessionContext_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  required_service_group_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SessionContext.Spec)
}
SessionContext_Spec::SessionContext_Spec(const SessionContext_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      required_service_group_(from.required_service_group_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  traffic_steering_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    traffic_steering_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_traffic_steering_function().empty()) {
    traffic_steering_function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_traffic_steering_function(), 
      GetArenaForAllocation());
  }
  desired_shard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desired_shard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desired_shard().empty()) {
    desired_shard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desired_shard(), 
      GetArenaForAllocation());
  }
  required_qos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    required_qos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_required_qos().empty()) {
    required_qos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_qos(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_session_filter()) {
    session_filter_ = new ::bbf::sss::SessionFilter(*from.session_filter_);
  } else {
    session_filter_ = nullptr;
  }
  context_type_ = from.context_type_;
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SessionContext.Spec)
}

inline void SessionContext_Spec::SharedCtor() {
traffic_steering_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  traffic_steering_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desired_shard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desired_shard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
required_qos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  required_qos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&context_type_) -
    reinterpret_cast<char*>(&session_filter_)) + sizeof(context_type_));
}

SessionContext_Spec::~SessionContext_Spec() {
  // @@protoc_insertion_point(destructor:bbf.sss.SessionContext.Spec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionContext_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  traffic_steering_function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desired_shard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_qos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_filter_;
}

void SessionContext_Spec::ArenaDtor(void* object) {
  SessionContext_Spec* _this = reinterpret_cast< SessionContext_Spec* >(object);
  (void)_this;
}
void SessionContext_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContext_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionContext_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SessionContext.Spec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_service_group_.Clear();
  traffic_steering_function_.ClearToEmpty();
  desired_shard_.ClearToEmpty();
  required_qos_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && session_filter_ != nullptr) {
    delete session_filter_;
  }
  session_filter_ = nullptr;
  context_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContext_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string traffic_steering_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_traffic_steering_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.Spec.traffic_steering_function"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desired_shard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desired_shard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.Spec.desired_shard"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_service_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_service_group();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.Spec.required_service_group"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string required_qos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_required_qos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.Spec.required_qos"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext.Spec.ContextType context_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_context_type(static_cast<::bbf::sss::SessionContext_Spec_ContextType>(val));
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionFilter session_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionContext_Spec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SessionContext.Spec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string traffic_steering_function = 1;
  if (!this->_internal_traffic_steering_function().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traffic_steering_function().data(), static_cast<int>(this->_internal_traffic_steering_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.Spec.traffic_steering_function");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_traffic_steering_function(), target);
  }

  // string desired_shard = 2;
  if (!this->_internal_desired_shard().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desired_shard().data(), static_cast<int>(this->_internal_desired_shard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.Spec.desired_shard");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desired_shard(), target);
  }

  // repeated string required_service_group = 3;
  for (int i = 0, n = this->_internal_required_service_group_size(); i < n; i++) {
    const auto& s = this->_internal_required_service_group(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.Spec.required_service_group");
    target = stream->WriteString(3, s, target);
  }

  // string required_qos = 4;
  if (!this->_internal_required_qos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_required_qos().data(), static_cast<int>(this->_internal_required_qos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.Spec.required_qos");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_required_qos(), target);
  }

  // .bbf.sss.SessionContext.Spec.ContextType context_type = 5;
  if (this->_internal_context_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_context_type(), target);
  }

  // .bbf.sss.SessionFilter session_filter = 6;
  if (this->_internal_has_session_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::session_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SessionContext.Spec)
  return target;
}

size_t SessionContext_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SessionContext.Spec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_service_group = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_service_group_.size());
  for (int i = 0, n = required_service_group_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_service_group_.Get(i));
  }

  // string traffic_steering_function = 1;
  if (!this->_internal_traffic_steering_function().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traffic_steering_function());
  }

  // string desired_shard = 2;
  if (!this->_internal_desired_shard().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desired_shard());
  }

  // string required_qos = 4;
  if (!this->_internal_required_qos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_qos());
  }

  // .bbf.sss.SessionFilter session_filter = 6;
  if (this->_internal_has_session_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_filter_);
  }

  // .bbf.sss.SessionContext.Spec.ContextType context_type = 5;
  if (this->_internal_context_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_context_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionContext_Spec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionContext_Spec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionContext_Spec::GetClassData() const { return &_class_data_; }

void SessionContext_Spec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionContext_Spec *>(to)->MergeFrom(
      static_cast<const SessionContext_Spec &>(from));
}


void SessionContext_Spec::MergeFrom(const SessionContext_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SessionContext.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  required_service_group_.MergeFrom(from.required_service_group_);
  if (!from._internal_traffic_steering_function().empty()) {
    _internal_set_traffic_steering_function(from._internal_traffic_steering_function());
  }
  if (!from._internal_desired_shard().empty()) {
    _internal_set_desired_shard(from._internal_desired_shard());
  }
  if (!from._internal_required_qos().empty()) {
    _internal_set_required_qos(from._internal_required_qos());
  }
  if (from._internal_has_session_filter()) {
    _internal_mutable_session_filter()->::bbf::sss::SessionFilter::MergeFrom(from._internal_session_filter());
  }
  if (from._internal_context_type() != 0) {
    _internal_set_context_type(from._internal_context_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionContext_Spec::CopyFrom(const SessionContext_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SessionContext.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContext_Spec::IsInitialized() const {
  return true;
}

void SessionContext_Spec::InternalSwap(SessionContext_Spec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  required_service_group_.InternalSwap(&other->required_service_group_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &traffic_steering_function_, lhs_arena,
      &other->traffic_steering_function_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desired_shard_, lhs_arena,
      &other->desired_shard_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_qos_, lhs_arena,
      &other->required_qos_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionContext_Spec, context_type_)
      + sizeof(SessionContext_Spec::context_type_)
      - PROTOBUF_FIELD_OFFSET(SessionContext_Spec, session_filter_)>(
          reinterpret_cast<char*>(&session_filter_),
          reinterpret_cast<char*>(&other->session_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContext_Spec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[57]);
}

// ===================================================================

class SessionContext_Status::_Internal {
 public:
};

SessionContext_Status::SessionContext_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SessionContext.Status)
}
SessionContext_Status::SessionContext_Status(const SessionContext_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_shard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_shard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_shard().empty()) {
    current_shard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_shard(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SessionContext.Status)
}

inline void SessionContext_Status::SharedCtor() {
current_shard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_shard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionContext_Status::~SessionContext_Status() {
  // @@protoc_insertion_point(destructor:bbf.sss.SessionContext.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionContext_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_shard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionContext_Status::ArenaDtor(void* object) {
  SessionContext_Status* _this = reinterpret_cast< SessionContext_Status* >(object);
  (void)_this;
}
void SessionContext_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContext_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionContext_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SessionContext.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_shard_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContext_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_shard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_current_shard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.Status.current_shard"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionContext_Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SessionContext.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_shard = 2;
  if (!this->_internal_current_shard().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_shard().data(), static_cast<int>(this->_internal_current_shard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.Status.current_shard");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_current_shard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SessionContext.Status)
  return target;
}

size_t SessionContext_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SessionContext.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_shard = 2;
  if (!this->_internal_current_shard().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_shard());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionContext_Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionContext_Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionContext_Status::GetClassData() const { return &_class_data_; }

void SessionContext_Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionContext_Status *>(to)->MergeFrom(
      static_cast<const SessionContext_Status &>(from));
}


void SessionContext_Status::MergeFrom(const SessionContext_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SessionContext.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_shard().empty()) {
    _internal_set_current_shard(from._internal_current_shard());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionContext_Status::CopyFrom(const SessionContext_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SessionContext.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContext_Status::IsInitialized() const {
  return true;
}

void SessionContext_Status::InternalSwap(SessionContext_Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_shard_, lhs_arena,
      &other->current_shard_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContext_Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[58]);
}

// ===================================================================

class SessionContext::_Internal {
 public:
  static const ::bbf::sss::MetaData& metadata(const SessionContext* msg);
  static const ::bbf::sss::SessionContext_Spec& spec(const SessionContext* msg);
  static const ::bbf::sss::SessionContext_Status& status(const SessionContext* msg);
};

const ::bbf::sss::MetaData&
SessionContext::_Internal::metadata(const SessionContext* msg) {
  return *msg->metadata_;
}
const ::bbf::sss::SessionContext_Spec&
SessionContext::_Internal::spec(const SessionContext* msg) {
  return *msg->spec_;
}
const ::bbf::sss::SessionContext_Status&
SessionContext::_Internal::status(const SessionContext* msg) {
  return *msg->status_;
}
SessionContext::SessionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SessionContext)
}
SessionContext::SessionContext(const SessionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::bbf::sss::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::bbf::sss::SessionContext_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bbf::sss::SessionContext_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SessionContext)
}

inline void SessionContext::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

SessionContext::~SessionContext() {
  // @@protoc_insertion_point(destructor:bbf.sss.SessionContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void SessionContext::ArenaDtor(void* object) {
  SessionContext* _this = reinterpret_cast< SessionContext* >(object);
  (void)_this;
}
void SessionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SessionContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionContext.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.MetaData metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext.Spec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bbf.sss.SessionContext.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SessionContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionContext.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .bbf.sss.SessionContext.Spec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .bbf.sss.SessionContext.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SessionContext)
  return target;
}

size_t SessionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SessionContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .bbf.sss.MetaData metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .bbf.sss.SessionContext.Spec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .bbf.sss.SessionContext.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionContext::GetClassData() const { return &_class_data_; }

void SessionContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionContext *>(to)->MergeFrom(
      static_cast<const SessionContext &>(from));
}


void SessionContext::MergeFrom(const SessionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SessionContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::bbf::sss::MetaData::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::bbf::sss::SessionContext_Spec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::bbf::sss::SessionContext_Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionContext::CopyFrom(const SessionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SessionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionContext::IsInitialized() const {
  return true;
}

void SessionContext::InternalSwap(SessionContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionContext, status_)
      + sizeof(SessionContext::status_)
      - PROTOBUF_FIELD_OFFSET(SessionContext, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[59]);
}

// ===================================================================

class SessionFilter::_Internal {
 public:
};

SessionFilter::SessionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bbf.sss.SessionFilter)
}
SessionFilter::SessionFilter(const SessionFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  circuit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    circuit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_circuit_id().empty()) {
    circuit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_circuit_id(), 
      GetArenaForAllocation());
  }
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_id().empty()) {
    remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&svlan_, &from.svlan_,
    static_cast<size_t>(reinterpret_cast<char*>(&cvlan_) -
    reinterpret_cast<char*>(&svlan_)) + sizeof(cvlan_));
  // @@protoc_insertion_point(copy_constructor:bbf.sss.SessionFilter)
}

inline void SessionFilter::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
circuit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  circuit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&svlan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cvlan_) -
    reinterpret_cast<char*>(&svlan_)) + sizeof(cvlan_));
}

SessionFilter::~SessionFilter() {
  // @@protoc_insertion_point(destructor:bbf.sss.SessionFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  circuit_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionFilter::ArenaDtor(void* object) {
  SessionFilter* _this = reinterpret_cast< SessionFilter* >(object);
  (void)_this;
}
void SessionFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:bbf.sss.SessionFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty();
  circuit_id_.ClearToEmpty();
  remote_id_.ClearToEmpty();
  ::memset(&svlan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cvlan_) -
      reinterpret_cast<char*>(&svlan_)) + sizeof(cvlan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mac_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionFilter.mac_address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 svlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          svlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cvlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          cvlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string circuit_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_circuit_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionFilter.circuit_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string remote_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_remote_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bbf.sss.SessionFilter.remote_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bbf.sss.SessionFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_address = 1;
  if (!this->_internal_mac_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionFilter.mac_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_address(), target);
  }

  // int32 svlan = 2;
  if (this->_internal_svlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svlan(), target);
  }

  // int32 cvlan = 3;
  if (this->_internal_cvlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cvlan(), target);
  }

  // string circuit_id = 4;
  if (!this->_internal_circuit_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_circuit_id().data(), static_cast<int>(this->_internal_circuit_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionFilter.circuit_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_circuit_id(), target);
  }

  // string remote_id = 5;
  if (!this->_internal_remote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_id().data(), static_cast<int>(this->_internal_remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bbf.sss.SessionFilter.remote_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbf.sss.SessionFilter)
  return target;
}

size_t SessionFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbf.sss.SessionFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac_address = 1;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // string circuit_id = 4;
  if (!this->_internal_circuit_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_circuit_id());
  }

  // string remote_id = 5;
  if (!this->_internal_remote_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_id());
  }

  // int32 svlan = 2;
  if (this->_internal_svlan() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svlan());
  }

  // int32 cvlan = 3;
  if (this->_internal_cvlan() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cvlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionFilter::GetClassData() const { return &_class_data_; }

void SessionFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionFilter *>(to)->MergeFrom(
      static_cast<const SessionFilter &>(from));
}


void SessionFilter::MergeFrom(const SessionFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbf.sss.SessionFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_circuit_id().empty()) {
    _internal_set_circuit_id(from._internal_circuit_id());
  }
  if (!from._internal_remote_id().empty()) {
    _internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_svlan() != 0) {
    _internal_set_svlan(from._internal_svlan());
  }
  if (from._internal_cvlan() != 0) {
    _internal_set_cvlan(from._internal_cvlan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionFilter::CopyFrom(const SessionFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbf.sss.SessionFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionFilter::IsInitialized() const {
  return true;
}

void SessionFilter::InternalSwap(SessionFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &circuit_id_, lhs_arena,
      &other->circuit_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_id_, lhs_arena,
      &other->remote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionFilter, cvlan_)
      + sizeof(SessionFilter::cvlan_)
      - PROTOBUF_FIELD_OFFSET(SessionFilter, svlan_)>(
          reinterpret_cast<char*>(&svlan_),
          reinterpret_cast<char*>(&other->svlan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sssupsf_2eproto_getter, &descriptor_table_sssupsf_2eproto_once,
      file_level_metadata_sssupsf_2eproto[60]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sss
}  // namespace bbf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bbf::sss::MetaData* Arena::CreateMaybeMessage< ::bbf::sss::MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListFilter* Arena::CreateMaybeMessage< ::bbf::sss::ListFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SubscribeReq* Arena::CreateMaybeMessage< ::bbf::sss::SubscribeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SubscribeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::Update* Arena::CreateMaybeMessage< ::bbf::sss::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::LookupReq* Arena::CreateMaybeMessage< ::bbf::sss::LookupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::LookupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::LookupResp* Arena::CreateMaybeMessage< ::bbf::sss::LookupResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::LookupResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateServiceGatewayReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateServiceGatewayReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateServiceGatewayReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteServiceGatewayReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteServiceGatewayReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteServiceGatewayReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetServiceGatewayReq* Arena::CreateMaybeMessage< ::bbf::sss::GetServiceGatewayReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetServiceGatewayReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGatewayResp* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGatewayResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGatewayResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListServiceGatewayReq* Arena::CreateMaybeMessage< ::bbf::sss::ListServiceGatewayReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListServiceGatewayReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListServiceGatewayResp* Arena::CreateMaybeMessage< ::bbf::sss::ListServiceGatewayResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListServiceGatewayResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateShardReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateShardReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateShardReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteShardReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteShardReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteShardReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetShardReq* Arena::CreateMaybeMessage< ::bbf::sss::GetShardReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetShardReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ShardResp* Arena::CreateMaybeMessage< ::bbf::sss::ShardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ShardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListShardReq* Arena::CreateMaybeMessage< ::bbf::sss::ListShardReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListShardReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListShardResp* Arena::CreateMaybeMessage< ::bbf::sss::ListShardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListShardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateTrafficSteeringFunctionReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateTrafficSteeringFunctionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateTrafficSteeringFunctionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteTrafficSteeringFunctionReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteTrafficSteeringFunctionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteTrafficSteeringFunctionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetTrafficSteeringFunctionReq* Arena::CreateMaybeMessage< ::bbf::sss::GetTrafficSteeringFunctionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetTrafficSteeringFunctionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::TrafficSteeringFunctionResp* Arena::CreateMaybeMessage< ::bbf::sss::TrafficSteeringFunctionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::TrafficSteeringFunctionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListTrafficSteeringFunctionReq* Arena::CreateMaybeMessage< ::bbf::sss::ListTrafficSteeringFunctionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListTrafficSteeringFunctionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListTrafficSteeringFunctionResp* Arena::CreateMaybeMessage< ::bbf::sss::ListTrafficSteeringFunctionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListTrafficSteeringFunctionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateServiceGatewayUserPlaneReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateServiceGatewayUserPlaneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateServiceGatewayUserPlaneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteServiceGatewayUserPlaneReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteServiceGatewayUserPlaneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteServiceGatewayUserPlaneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetServiceGatewayUserPlaneReq* Arena::CreateMaybeMessage< ::bbf::sss::GetServiceGatewayUserPlaneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetServiceGatewayUserPlaneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGatewayUserPlaneResp* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGatewayUserPlaneResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGatewayUserPlaneResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListServiceGatewayUserPlaneReq* Arena::CreateMaybeMessage< ::bbf::sss::ListServiceGatewayUserPlaneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListServiceGatewayUserPlaneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListServiceGatewayUserPlaneResp* Arena::CreateMaybeMessage< ::bbf::sss::ListServiceGatewayUserPlaneResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListServiceGatewayUserPlaneResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateNetworkConnectionReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateNetworkConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateNetworkConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteNetworkConnectionReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteNetworkConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteNetworkConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetNetworkConnectionReq* Arena::CreateMaybeMessage< ::bbf::sss::GetNetworkConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetNetworkConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::NetworkConnectionResp* Arena::CreateMaybeMessage< ::bbf::sss::NetworkConnectionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::NetworkConnectionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListNetworkConnectionReq* Arena::CreateMaybeMessage< ::bbf::sss::ListNetworkConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListNetworkConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListNetworkConnectionResp* Arena::CreateMaybeMessage< ::bbf::sss::ListNetworkConnectionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListNetworkConnectionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::UpdateSessionContextReq* Arena::CreateMaybeMessage< ::bbf::sss::UpdateSessionContextReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::UpdateSessionContextReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::DeleteSessionContextReq* Arena::CreateMaybeMessage< ::bbf::sss::DeleteSessionContextReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::DeleteSessionContextReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::GetSessionContextReq* Arena::CreateMaybeMessage< ::bbf::sss::GetSessionContextReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::GetSessionContextReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SessionContextResp* Arena::CreateMaybeMessage< ::bbf::sss::SessionContextResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SessionContextResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListSessionContextReq* Arena::CreateMaybeMessage< ::bbf::sss::ListSessionContextReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListSessionContextReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ListSessionContextResp* Arena::CreateMaybeMessage< ::bbf::sss::ListSessionContextResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ListSessionContextResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGatewayUserPlane_Spec* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGatewayUserPlane_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGatewayUserPlane_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGatewayUserPlane_Status* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGatewayUserPlane_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGatewayUserPlane_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGatewayUserPlane* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGatewayUserPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGatewayUserPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::Shard_Spec* Arena::CreateMaybeMessage< ::bbf::sss::Shard_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::Shard_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse* Arena::CreateMaybeMessage< ::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::Shard_Status_TsfNetworkConnectionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::Shard_Status* Arena::CreateMaybeMessage< ::bbf::sss::Shard_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::Shard_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::Shard* Arena::CreateMaybeMessage< ::bbf::sss::Shard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::Shard >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::TrafficSteeringFunction_Spec* Arena::CreateMaybeMessage< ::bbf::sss::TrafficSteeringFunction_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::TrafficSteeringFunction_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::TrafficSteeringFunction* Arena::CreateMaybeMessage< ::bbf::sss::TrafficSteeringFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::TrafficSteeringFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::ServiceGateway* Arena::CreateMaybeMessage< ::bbf::sss::ServiceGateway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::ServiceGateway >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::NetworkConnection_Spec* Arena::CreateMaybeMessage< ::bbf::sss::NetworkConnection_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::NetworkConnection_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::NetworkConnection_Status* Arena::CreateMaybeMessage< ::bbf::sss::NetworkConnection_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::NetworkConnection_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::NetworkConnection* Arena::CreateMaybeMessage< ::bbf::sss::NetworkConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::NetworkConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::VxlanConnection_Vtep* Arena::CreateMaybeMessage< ::bbf::sss::VxlanConnection_Vtep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::VxlanConnection_Vtep >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::VxlanConnection* Arena::CreateMaybeMessage< ::bbf::sss::VxlanConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::VxlanConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SessionContext_Spec* Arena::CreateMaybeMessage< ::bbf::sss::SessionContext_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SessionContext_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SessionContext_Status* Arena::CreateMaybeMessage< ::bbf::sss::SessionContext_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SessionContext_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SessionContext* Arena::CreateMaybeMessage< ::bbf::sss::SessionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SessionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::bbf::sss::SessionFilter* Arena::CreateMaybeMessage< ::bbf::sss::SessionFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bbf::sss::SessionFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
